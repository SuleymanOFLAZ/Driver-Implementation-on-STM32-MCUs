
Driver-Implementation-on-STM32-MCUs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002288  08002288  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002288  08002288  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002288  08002288  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002288  08002288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000064  080022f4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080022f4  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034fc  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008f0  00000000  00000000  0002358a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000280  00000000  00000000  00023e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000228  00000000  00000000  00024100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003240  00000000  00000000  00024328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002056  00000000  00000000  00027568  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b686  00000000  00000000  000295be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034c44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001060  00000000  00000000  00034cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021c8 	.word	0x080021c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080021c8 	.word	0x080021c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d120      	bne.n	80002e4 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a23      	ldr	r2, [pc, #140]	; (8000334 <SPI_PeriClockControl+0xa4>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b4:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 80002b6:	e038      	b.n	800032a <SPI_PeriClockControl+0x9a>
		else if(pSPIx == SPI2)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a20      	ldr	r2, [pc, #128]	; (800033c <SPI_PeriClockControl+0xac>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80002c0:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002cc:	e02d      	b.n	800032a <SPI_PeriClockControl+0x9a>
		else if(pSPIx == SPI3)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <SPI_PeriClockControl+0xb0>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d129      	bne.n	800032a <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 80002d6:	4b18      	ldr	r3, [pc, #96]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002da:	4a17      	ldr	r2, [pc, #92]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002e2:	e022      	b.n	800032a <SPI_PeriClockControl+0x9a>
	else if(EnorDi == DISABLE)
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d11f      	bne.n	800032a <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a11      	ldr	r2, [pc, #68]	; (8000334 <SPI_PeriClockControl+0xa4>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002f6:	4a10      	ldr	r2, [pc, #64]	; (8000338 <SPI_PeriClockControl+0xa8>)
 80002f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002fc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80002fe:	e014      	b.n	800032a <SPI_PeriClockControl+0x9a>
		else if(pSPIx == SPI2)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <SPI_PeriClockControl+0xac>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <SPI_PeriClockControl+0xa8>)
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <SPI_PeriClockControl+0xa8>)
 800030e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000312:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000314:	e009      	b.n	800032a <SPI_PeriClockControl+0x9a>
		else if(pSPIx == SPI3)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <SPI_PeriClockControl+0xb0>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d105      	bne.n	800032a <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <SPI_PeriClockControl+0xa8>)
 8000320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <SPI_PeriClockControl+0xa8>)
 8000324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000328:	6413      	str	r3, [r2, #64]	; 0x40
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40013000 	.word	0x40013000
 8000338:	40023800 	.word	0x40023800
 800033c:	40003800 	.word	0x40003800
 8000340:	40003c00 	.word	0x40003c00

08000344 <SPI_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	/* Enabling SPI Peripheral */
	//pSPIHandle->pSPIx->SPI_CR1 |= (1 << 6);

	/* SPI MODE Configure */
	if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_MODE_SLAVE)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d108      	bne.n	8000366 <SPI_Init+0x22>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f022 0204 	bic.w	r2, r2, #4
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	e00b      	b.n	800037e <SPI_Init+0x3a>
	}
	else if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_MODE_MASTER)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d107      	bne.n	800037e <SPI_Init+0x3a>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= (1 << 2);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f042 0204 	orr.w	r2, r2, #4
 800037c:	601a      	str	r2, [r3, #0]
	}

	/* SPI BUS Configure */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_FULLDUBLEX)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	795b      	ldrb	r3, [r3, #5]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d110      	bne.n	80003a8 <SPI_Init+0x64>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 15);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000394:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 10);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e028      	b.n	80003fa <SPI_Init+0xb6>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HALFDUBLEX)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d110      	bne.n	80003d2 <SPI_Init+0x8e>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 10);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003be:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->SPI_CR1 |= (1 << 15);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e013      	b.n	80003fa <SPI_Init+0xb6>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d10f      	bne.n	80003fa <SPI_Init+0xb6>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 15);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80003e8:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->SPI_CR1 |= (1 << 10);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003f8:	601a      	str	r2, [r3, #0]
	}

	/* SPI SCLK Speed Configure */
	pSPIHandle->pSPIx->SPI_CR1 &= ~(7 << 3);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000408:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->SPI_CR1 |= ( (pSPIHandle->SPIConfig.SPI_SclkSpeed & 7) << 3);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	799b      	ldrb	r3, [r3, #6]
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]

	/* SPI DFF Configure */
	pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 11);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000430:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->SPI_CR1 |= ( (pSPIHandle->SPIConfig.SPI_DFF & 1) << 11);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6819      	ldr	r1, [r3, #0]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	79db      	ldrb	r3, [r3, #7]
 800043c:	02db      	lsls	r3, r3, #11
 800043e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	430a      	orrs	r2, r1
 8000448:	601a      	str	r2, [r3, #0]

	/* SPI CPOL Configure */
	pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 1);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f022 0202 	bic.w	r2, r2, #2
 8000458:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->SPI_CR1 |= ( (pSPIHandle->SPIConfig.SPI_CPOL & 1) << 1);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	7a1b      	ldrb	r3, [r3, #8]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	f003 0202 	and.w	r2, r3, #2
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	601a      	str	r2, [r3, #0]

	/* SPI CPHA Configure */
	pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 0);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f022 0201 	bic.w	r2, r2, #1
 8000480:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->SPI_CR1 |= ( (pSPIHandle->SPIConfig.SPI_CPHA & 1) << 0);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7a5b      	ldrb	r3, [r3, #9]
 800048c:	f003 0201 	and.w	r2, r3, #1
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	430a      	orrs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]

	/* SPI SSM Configure */
	pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 9);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80004a6:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->SPI_CR1 |= ( (pSPIHandle->SPIConfig.SPI_SSM & 1) << 9);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	6819      	ldr	r1, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7a9b      	ldrb	r3, [r3, #10]
 80004b2:	025b      	lsls	r3, r3, #9
 80004b4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	430a      	orrs	r2, r1
 80004be:	601a      	str	r2, [r3, #0]

}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
	...

080004cc <SPI_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	460a      	mov	r2, r1
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t temp1 = IRQNumber / 32;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	095b      	lsrs	r3, r3, #5
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]
	volatile uint8_t temp2 = IRQNumber % 32;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 031f 	and.w	r3, r3, #31
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	73bb      	strb	r3, [r7, #14]

	if(EnorDi==ENABLE)
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d117      	bne.n	8000524 <SPI_IRQInterruptConfig+0x58>
	{
		NVIC_ISER[temp1] |= (1 << temp2);
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	2301      	movs	r3, #1
 80004fc:	fa03 f002 	lsl.w	r0, r3, r2
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	b2d9      	uxtb	r1, r3
 8000504:	460b      	mov	r3, r1
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800050c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	460b      	mov	r3, r1
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800051a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800051e:	4302      	orrs	r2, r0
 8000520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		NVIC_ICER[temp1] |= (1 << temp2);
	}
}
 8000522:	e012      	b.n	800054a <SPI_IRQInterruptConfig+0x7e>
		NVIC_ICER[temp1] |= (1 << temp2);
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	2301      	movs	r3, #1
 800052c:	fa03 f002 	lsl.w	r0, r3, r2
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	b2d9      	uxtb	r1, r3
 8000534:	460b      	mov	r3, r1
 8000536:	009a      	lsls	r2, r3, #2
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SPI_IRQInterruptConfig+0x88>)
 800053a:	4413      	add	r3, r2
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	460b      	mov	r3, r1
 8000540:	0099      	lsls	r1, r3, #2
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <SPI_IRQInterruptConfig+0x88>)
 8000544:	440b      	add	r3, r1
 8000546:	4302      	orrs	r2, r0
 8000548:	601a      	str	r2, [r3, #0]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	e000e180 	.word	0xe000e180

08000558 <SPI_IRQHandling>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	temp1 = ((pHandle->pSPIx->SPI_SR >> 1) & 1 );	// Check TXE
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	085b      	lsrs	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
	temp2 = ((pHandle->pSPIx->SPI_CR2 >> 7) & 1 );	// Check TXEIE
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	09db      	lsrs	r3, r3, #7
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d005      	beq.n	8000592 <SPI_IRQHandling+0x3a>
 8000586:	7bbb      	ldrb	r3, [r7, #14]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <SPI_IRQHandling+0x3a>
	{
		// Handle TXE
		spi_txe_interrupt_handle(pHandle);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f8c9 	bl	8000724 <spi_txe_interrupt_handle>
	}

	temp1 = ((pHandle->pSPIx->SPI_SR >> 0) & 1 );  // Check RXNE
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
	temp2 = ((pHandle->pSPIx->SPI_CR2 >> 6) & 1 ); // Check RXNEIE
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	099b      	lsrs	r3, r3, #6
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d005      	beq.n	80005c2 <SPI_IRQHandling+0x6a>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <SPI_IRQHandling+0x6a>
	{
		// Handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f8ed 	bl	800079c <spi_rxne_interrupt_handle>
	}

	temp1 = ((pHandle->pSPIx->SPI_SR >> 6) & 1 );  // Check OVR (Overrun) flag
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	099b      	lsrs	r3, r3, #6
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
	temp2 = ((pHandle->pSPIx->SPI_CR2 >> 5) & 1 ); // Check ERRIE
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	095b      	lsrs	r3, r3, #5
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <SPI_IRQHandling+0x9c>
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <SPI_IRQHandling+0x9c>
	{
		// Handle overrun error
		spi_ovr_err_interrupt_handle(pHandle);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f912 	bl	8000818 <spi_ovr_err_interrupt_handle>
	}
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SPI_SendDataIT>:
 * @return		- none
 *
 * @Note		- none
 */
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	volatile uint8_t state = pSPIHandle->TxState;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	7f1b      	ldrb	r3, [r3, #28]
 800060c:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 800060e:	7dfb      	ldrb	r3, [r7, #23]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b02      	cmp	r3, #2
 8000614:	d010      	beq.n	8000638 <SPI_SendDataIT+0x3c>
	{
		// 1. Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	615a      	str	r2, [r3, #20]
		// 2. Mark SPI state as bussy in transmission so that no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2202      	movs	r2, #2
 8000626:	771a      	strb	r2, [r3, #28]
		// 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->SPI_CR2 |= (1 << 7);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000636:	605a      	str	r2, [r3, #4]
	}
	// 4. Data Transmission will be handled by ISR code

	return state;
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <SPI_ReceiveDataIT>:
 * @return		- none
 *
 * @Note		- none
 */
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000646:	b480      	push	{r7}
 8000648:	b087      	sub	sp, #28
 800064a:	af00      	add	r7, sp, #0
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	607a      	str	r2, [r7, #4]
	volatile uint8_t state = pSPIHandle->RxState;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	7f5b      	ldrb	r3, [r3, #29]
 8000656:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b01      	cmp	r3, #1
 800065e:	d010      	beq.n	8000682 <SPI_ReceiveDataIT+0x3c>
	{
		// 1. Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	619a      	str	r2, [r3, #24]
		// 2. Mark SPI state as bussy in transmission so that no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2201      	movs	r2, #1
 8000670:	775a      	strb	r2, [r3, #29]
		// 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->SPI_CR2 |= (1 << 6);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000680:	605a      	str	r2, [r3, #4]
	}
	// 4. Data Transmission will be handled by ISR code

	return state;
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	b2db      	uxtb	r3, r3
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <SPI_PeripheralControl>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d106      	bne.n	80006b0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->SPI_CR1 |= (1 << 6);  // Set SPI enable bit
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->SPI_CR1 &= ~(1 << 6);  // Reset SPI enable bit
	}
}
 80006ae:	e005      	b.n	80006bc <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(1 << 6);  // Reset SPI enable bit
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <SPI_GetFlag>:
 * @return		- none
 *
 * @Note		- none
 */
uint8_t SPI_GetFlag(SPI_RegDef_t *pSPIx, uint8_t flag)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	70fb      	strb	r3, [r7, #3]
	return (uint8_t)((pSPIx->SPI_SR >> flag) & 1); // check for options: @spi_flags   in SPI driver header file
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	fa22 f303 	lsr.w	r3, r2, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <SPI_SSOEConfig>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d106      	bne.n	800070e <SPI_SSOEConfig+0x20>
	{
		pSPIx->SPI_CR2 |= (1 << 2);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f043 0204 	orr.w	r2, r3, #4
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->SPI_CR2 &= ~(1 << 2);
	}
}
 800070c:	e005      	b.n	800071a <SPI_SSOEConfig+0x2c>
		pSPIx->SPI_CR2 &= ~(1 << 2);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f023 0204 	bic.w	r2, r3, #4
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	605a      	str	r2, [r3, #4]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <spi_txe_interrupt_handle>:
 * @return		- none
 *
 * @Note		- none
 */
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if( !((pSPIHandle->pSPIx->SPI_CR1 >> 11) & 1) ) // Check DFF
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	0adb      	lsrs	r3, r3, #11
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b00      	cmp	r3, #0
 800073a:	d110      	bne.n	800075e <spi_txe_interrupt_handle+0x3a>
	{
		// If DFF is 8-bit
		pSPIHandle->pSPIx->SPI_DR = *pSPIHandle->pTxBuffer;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60da      	str	r2, [r3, #12]
		pSPIHandle->pTxBuffer++;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	e00f      	b.n	800077e <spi_txe_interrupt_handle+0x5a>
	}
	else
	{
		// If DFF is 16-bit
		pSPIHandle->pSPIx->SPI_DR = *(uint16_t*)pSPIHandle->pTxBuffer;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	881a      	ldrh	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60da      	str	r2, [r3, #12]
		(uint16_t *)pSPIHandle->pTxBuffer++;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen-=2;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	1e9a      	subs	r2, r3, #2
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	615a      	str	r2, [r3, #20]
	}
	if(pSPIHandle->TxLen == 0)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d106      	bne.n	8000794 <spi_txe_interrupt_handle+0x70>
	{
		SPI_CloseTransmission(pSPIHandle);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f85e 	bl	8000848 <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 800078c:	2101      	movs	r1, #1
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 fcd4 	bl	800113c <SPI_ApplicationEventCallback>
	}
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <spi_rxne_interrupt_handle>:
 * @return		- none
 *
 * @Note		- none
 */
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	if( !((pSPIHandle->pSPIx->SPI_CR1 >> 11) & 1) ) // Check DFF
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	0adb      	lsrs	r3, r3, #11
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d111      	bne.n	80007d8 <spi_rxne_interrupt_handle+0x3c>
	{
		// If DFF is 8-bit
		*pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->SPI_DR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68da      	ldr	r2, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	701a      	strb	r2, [r3, #0]
		pSPIHandle->pRxBuffer++;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen--;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	619a      	str	r2, [r3, #24]
 80007d6:	e010      	b.n	80007fa <spi_rxne_interrupt_handle+0x5e>
	}
	else
	{
		// If DFF is 16-bit
		*(uint16_t *)pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->SPI_DR;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	b292      	uxth	r2, r2
 80007e4:	801a      	strh	r2, [r3, #0]
		(uint16_t *)pSPIHandle->pRxBuffer++;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen-=2;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	1e9a      	subs	r2, r3, #2
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	619a      	str	r2, [r3, #24]
	}
	if(pSPIHandle->RxLen == 0)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d106      	bne.n	8000810 <spi_rxne_interrupt_handle+0x74>
	{
		SPI_CloseReception(pSPIHandle);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f83a 	bl	800087c <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000808:	2102      	movs	r1, #2
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 fc96 	bl	800113c <SPI_ApplicationEventCallback>
	}
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <spi_ovr_err_interrupt_handle>:
 * @return		- none
 *
 * @Note		- none
 */
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	// 1. Clean the ovr flag -- (This steps describes in MCU's relevant reference manual document)
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX) // IS SPI is not busy with transmit data
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7f1b      	ldrb	r3, [r3, #28]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d007      	beq.n	8000838 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->SPI_DR; // Read access to DR register
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SPI_SR; // Read access to SR register
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	// 2. Inform application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000838:	2103      	movs	r1, #3
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 fc7e 	bl	800113c <SPI_ApplicationEventCallback>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <SPI_CloseTransmission>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->SPI_CR2 &= ~(1 << 7); 	// Clear the TXEIE bit
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800085e:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	771a      	strb	r2, [r3, #28]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SPI_CloseReception>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->SPI_CR2 &= ~(1 << 6); 	// Clear the RXNEIE bit
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000892:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	775a      	strb	r2, [r3, #29]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d162      	bne.n	8000988 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a65      	ldr	r2, [pc, #404]	; (8000a5c <GPIO_PeriClockControl+0x1ac>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80008ca:	4b65      	ldr	r3, [pc, #404]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a64      	ldr	r2, [pc, #400]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 80008d6:	e0bc      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOB)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a62      	ldr	r2, [pc, #392]	; (8000a64 <GPIO_PeriClockControl+0x1b4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80008e0:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a5e      	ldr	r2, [pc, #376]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ec:	e0b1      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOC)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a5d      	ldr	r2, [pc, #372]	; (8000a68 <GPIO_PeriClockControl+0x1b8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80008f6:	4b5a      	ldr	r3, [pc, #360]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a59      	ldr	r2, [pc, #356]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000902:	e0a6      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOD)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a59      	ldr	r2, [pc, #356]	; (8000a6c <GPIO_PeriClockControl+0x1bc>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d106      	bne.n	800091a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800090c:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a53      	ldr	r2, [pc, #332]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000918:	e09b      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a54      	ldr	r2, [pc, #336]	; (8000a70 <GPIO_PeriClockControl+0x1c0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000922:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a4e      	ldr	r2, [pc, #312]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092e:	e090      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOF)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a50      	ldr	r2, [pc, #320]	; (8000a74 <GPIO_PeriClockControl+0x1c4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000938:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000944:	e085      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOG)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <GPIO_PeriClockControl+0x1c8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095a:	e07a      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOH)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a47      	ldr	r2, [pc, #284]	; (8000a7c <GPIO_PeriClockControl+0x1cc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000964:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 800096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000970:	e06f      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOI)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <GPIO_PeriClockControl+0x1d0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d16b      	bne.n	8000a52 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a38      	ldr	r2, [pc, #224]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000986:	e064      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
	else if(EnorDi == DISABLE)
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d161      	bne.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a32      	ldr	r2, [pc, #200]	; (8000a5c <GPIO_PeriClockControl+0x1ac>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 8000996:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a31      	ldr	r2, [pc, #196]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 800099c:	f023 0301 	bic.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a2:	e056      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOB)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <GPIO_PeriClockControl+0x1b4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d106      	bne.n	80009ba <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009b2:	f023 0302 	bic.w	r3, r3, #2
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b8:	e04b      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOC)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <GPIO_PeriClockControl+0x1b8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009c8:	f023 0304 	bic.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ce:	e040      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOD)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <GPIO_PeriClockControl+0x1bc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009de:	f023 0308 	bic.w	r3, r3, #8
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e4:	e035      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <GPIO_PeriClockControl+0x1c0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 80009f4:	f023 0310 	bic.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fa:	e02a      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOF)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <GPIO_PeriClockControl+0x1c4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a0a:	f023 0320 	bic.w	r3, r3, #32
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a10:	e01f      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOG)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <GPIO_PeriClockControl+0x1c8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a26:	e014      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOH)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <GPIO_PeriClockControl+0x1cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3c:	e009      	b.n	8000a52 <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx == GPIOI)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <GPIO_PeriClockControl+0x1d0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d105      	bne.n	8000a52 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <GPIO_PeriClockControl+0x1b0>)
 8000a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40021400 	.word	0x40021400
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	40021c00 	.word	0x40021c00
 8000a80:	40022000 	.word	0x40022000

08000a84 <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d81f      	bhi.n	8000ad4 <GPIO_Init+0x50>
	{
		// Setting Pin Mode
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	791b      	ldrb	r3, [r3, #4]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	400a      	ands	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	4619      	mov	r1, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e0e3      	b.n	8000c9c <GPIO_Init+0x218>
	}
	else
	{
		// Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d117      	bne.n	8000b0c <GPIO_Init+0x88>
		{
			// 1. Configure the RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000adc:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <GPIO_Init+0x184>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	7912      	ldrb	r2, [r2, #4]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	408a      	lsls	r2, r1
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	4611      	mov	r1, r2
 8000aee:	4a46      	ldr	r2, [pc, #280]	; (8000c08 <GPIO_Init+0x184>)
 8000af0:	400b      	ands	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af4:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <GPIO_Init+0x184>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7912      	ldrb	r2, [r2, #4]
 8000afc:	4611      	mov	r1, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	408a      	lsls	r2, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <GPIO_Init+0x184>)
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6093      	str	r3, [r2, #8]
 8000b0a:	e035      	b.n	8000b78 <GPIO_Init+0xf4>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	795b      	ldrb	r3, [r3, #5]
 8000b10:	2b05      	cmp	r3, #5
 8000b12:	d117      	bne.n	8000b44 <GPIO_Init+0xc0>
		{
			// 1. Configure the FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <GPIO_Init+0x184>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7912      	ldrb	r2, [r2, #4]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	2201      	movs	r2, #1
 8000b20:	408a      	lsls	r2, r1
 8000b22:	43d2      	mvns	r2, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a38      	ldr	r2, [pc, #224]	; (8000c08 <GPIO_Init+0x184>)
 8000b28:	400b      	ands	r3, r1
 8000b2a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <GPIO_Init+0x184>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	7912      	ldrb	r2, [r2, #4]
 8000b34:	4611      	mov	r1, r2
 8000b36:	2201      	movs	r2, #1
 8000b38:	408a      	lsls	r2, r1
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a32      	ldr	r2, [pc, #200]	; (8000c08 <GPIO_Init+0x184>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	60d3      	str	r3, [r2, #12]
 8000b42:	e019      	b.n	8000b78 <GPIO_Init+0xf4>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d115      	bne.n	8000b78 <GPIO_Init+0xf4>
		{
			// 1. Configure both RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <GPIO_Init+0x184>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	4611      	mov	r1, r2
 8000b56:	2201      	movs	r2, #1
 8000b58:	408a      	lsls	r2, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4a2a      	ldr	r2, [pc, #168]	; (8000c08 <GPIO_Init+0x184>)
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <GPIO_Init+0x184>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	7912      	ldrb	r2, [r2, #4]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	408a      	lsls	r2, r1
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <GPIO_Init+0x184>)
 8000b74:	430b      	orrs	r3, r1
 8000b76:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	791b      	ldrb	r3, [r3, #4]
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	791b      	ldrb	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <GPIO_Init+0x188>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d04d      	beq.n	8000c30 <GPIO_Init+0x1ac>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <GPIO_Init+0x18c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d032      	beq.n	8000c04 <GPIO_Init+0x180>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <GPIO_Init+0x190>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d02b      	beq.n	8000c00 <GPIO_Init+0x17c>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <GPIO_Init+0x194>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d024      	beq.n	8000bfc <GPIO_Init+0x178>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <GPIO_Init+0x198>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d01d      	beq.n	8000bf8 <GPIO_Init+0x174>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <GPIO_Init+0x19c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d016      	beq.n	8000bf4 <GPIO_Init+0x170>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <GPIO_Init+0x1a0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00f      	beq.n	8000bf0 <GPIO_Init+0x16c>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <GPIO_Init+0x1a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d008      	beq.n	8000bec <GPIO_Init+0x168>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <GPIO_Init+0x1a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <GPIO_Init+0x164>
 8000be4:	2308      	movs	r3, #8
 8000be6:	e024      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000be8:	2300      	movs	r3, #0
 8000bea:	e022      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000bec:	2307      	movs	r3, #7
 8000bee:	e020      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	e01e      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	e01c      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e01a      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e018      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e016      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e014      	b.n	8000c32 <GPIO_Init+0x1ae>
 8000c08:	40013c00 	.word	0x40013c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40021400 	.word	0x40021400
 8000c24:	40021800 	.word	0x40021800
 8000c28:	40021c00 	.word	0x40021c00
 8000c2c:	40022000 	.word	0x40022000
 8000c30:	2300      	movs	r3, #0
 8000c32:	737b      	strb	r3, [r7, #13]
		SYSCFG_PCLK_EN();
 8000c34:	4b6e      	ldr	r3, [pc, #440]	; (8000df0 <GPIO_Init+0x36c>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	4a6d      	ldr	r2, [pc, #436]	; (8000df0 <GPIO_Init+0x36c>)
 8000c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2*4));
 8000c40:	4a6c      	ldr	r2, [pc, #432]	; (8000df4 <GPIO_Init+0x370>)
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3302      	adds	r3, #2
 8000c46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	210f      	movs	r1, #15
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	4966      	ldr	r1, [pc, #408]	; (8000df4 <GPIO_Init+0x370>)
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	4002      	ands	r2, r0
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2*4));
 8000c64:	4a63      	ldr	r2, [pc, #396]	; (8000df4 <GPIO_Init+0x370>)
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c6e:	7b79      	ldrb	r1, [r7, #13]
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	495e      	ldr	r1, [pc, #376]	; (8000df4 <GPIO_Init+0x370>)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4302      	orrs	r2, r0
 8000c80:	3302      	adds	r3, #2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		// 3. Enable the EXTI Interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c86:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <GPIO_Init+0x374>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	7912      	ldrb	r2, [r2, #4]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	408a      	lsls	r2, r1
 8000c94:	4611      	mov	r1, r2
 8000c96:	4a58      	ldr	r2, [pc, #352]	; (8000df8 <GPIO_Init+0x374>)
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6013      	str	r3, [r2, #0]
	}

	// Setting Output Type
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2301      	movs	r3, #1
 8000caa:	408b      	lsls	r3, r1
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7a1b      	ldrb	r3, [r3, #8]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	605a      	str	r2, [r3, #4]

	// Setting Speed
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	791b      	ldrb	r3, [r3, #4]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	799b      	ldrb	r3, [r3, #6]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	791b      	ldrb	r3, [r3, #4]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	609a      	str	r2, [r3, #8]

	//Setting Pull UP/DOWN Configuration
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	791b      	ldrb	r3, [r3, #4]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2103      	movs	r1, #3
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4619      	mov	r1, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	400a      	ands	r2, r1
 8000d30:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	79db      	ldrb	r3, [r3, #7]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	791b      	ldrb	r3, [r3, #4]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4619      	mov	r1, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	60da      	str	r2, [r3, #12]

	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	733b      	strb	r3, [r7, #12]
	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	72fb      	strb	r3, [r7, #11]

	// Setting Alternate Function
	if(temp2 == 0)
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d11f      	bne.n	8000daa <GPIO_Init+0x326>
	{
		pGPIOHandle->pGPIOx->AFRL &= ~(15 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6a1a      	ldr	r2, [r3, #32]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	210f      	movs	r1, #15
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	400a      	ands	r2, r1
 8000d86:	621a      	str	r2, [r3, #32]
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6a1a      	ldr	r2, [r3, #32]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7a5b      	ldrb	r3, [r3, #9]
 8000d92:	4619      	mov	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	621a      	str	r2, [r3, #32]
	else
	{
		pGPIOHandle->pGPIOx->AFRH &= ~(15 << (4 * temp1));
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp1));
	}
}
 8000da8:	e01c      	b.n	8000de4 <GPIO_Init+0x360>
		pGPIOHandle->pGPIOx->AFRH &= ~(15 << (4 * temp1));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	210f      	movs	r1, #15
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp1));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7a5b      	ldrb	r3, [r3, #9]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	7b3b      	ldrb	r3, [r7, #12]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40013c00 	.word	0x40013c00

08000dfc <GPIO_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t temp1 = IRQNumber / 32;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	73fb      	strb	r3, [r7, #15]
	volatile uint8_t temp2 = IRQNumber % 32;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73bb      	strb	r3, [r7, #14]

	if(EnorDi==ENABLE)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d117      	bne.n	8000e54 <GPIO_IRQInterruptConfig+0x58>
	{
		NVIC_ISER[temp1] |= (1 << temp2);
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	fa03 f002 	lsl.w	r0, r3, r2
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	b2d9      	uxtb	r1, r3
 8000e34:	460b      	mov	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e3c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	460b      	mov	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e4a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000e4e:	4302      	orrs	r2, r0
 8000e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		NVIC_ICER[temp1] |= (1 << temp2);
	}
}
 8000e52:	e012      	b.n	8000e7a <GPIO_IRQInterruptConfig+0x7e>
		NVIC_ICER[temp1] |= (1 << temp2);
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	fa03 f002 	lsl.w	r0, r3, r2
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	b2d9      	uxtb	r1, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	009a      	lsls	r2, r3, #2
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <GPIO_IRQInterruptConfig+0x88>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	0099      	lsls	r1, r3, #2
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <GPIO_IRQInterruptConfig+0x88>)
 8000e74:	440b      	add	r3, r1
 8000e76:	4302      	orrs	r2, r0
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	e000e180 	.word	0xe000e180

08000e88 <GPIO_IRQPriorityConfig>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t temp1 = IRQNumber / 4;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	73fb      	strb	r3, [r7, #15]
	volatile uint8_t temp2 = IRQNumber % 4;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73bb      	strb	r3, [r7, #14]
	volatile uint8_t shift_amount;

	shift_amount = (temp2 * 8) + (8 - 4);  // This is MCU Specific calculation. In STM32F4xx MCU there is only 4 implemented priority bits.
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3304      	adds	r3, #4
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	737b      	strb	r3, [r7, #13]

	NVIC_IPR[temp1] &= ~(0xFF << (temp2 * 8));
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	22ff      	movs	r2, #255	; 0xff
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43d8      	mvns	r0, r3
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	b2d9      	uxtb	r1, r3
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ece:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000edc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ee0:	4002      	ands	r2, r0
 8000ee2:	601a      	str	r2, [r3, #0]
	NVIC_IPR[temp1] |= (IRQPriority << shift_amount);
 8000ee4:	7b7b      	ldrb	r3, [r7, #13]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	fa03 f102 	lsl.w	r1, r3, r2
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	b2d8      	uxtb	r0, r3
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000efc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4603      	mov	r3, r0
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f0a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <GPIO_IRQHandling>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	// Check the IRQ Pending bit set or reset
	if(EXTI->PR & (1 << PinNumber))
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <GPIO_IRQHandling+0x30>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <GPIO_IRQHandling+0x26>
	{
		// set the Pending Bit for clearing it
		EXTI->PR = (1 << PinNumber);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <GPIO_IRQHandling+0x30>)
 8000f40:	615a      	str	r2, [r3, #20]
	}
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <SPI2_GPIOInits+0x58>)
 8000f58:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000f6e:	230d      	movs	r3, #13
 8000f70:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fd85 	bl	8000a84 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fd7f 	bl	8000a84 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000f86:	230e      	movs	r3, #14
 8000f88:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fd79 	bl	8000a84 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000f92:	230c      	movs	r3, #12
 8000f94:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fd73 	bl	8000a84 <GPIO_Init>


}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020400 	.word	0x40020400

08000fac <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <SPI2_Inits+0x40>)
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <SPI2_Inits+0x44>)
 8000fb4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_FULLDUBLEX;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <SPI2_Inits+0x40>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <SPI2_Inits+0x40>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLKSPEED_DIV32;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <SPI2_Inits+0x40>)
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BIT;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <SPI2_Inits+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <SPI2_Inits+0x40>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SPI2_Inits+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_SOFTWARE_DI; //Hardware slave management enabled for NSS pin
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SPI2_Inits+0x40>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <SPI2_Inits+0x40>)
 8000fe2:	f7ff f9af 	bl	8000344 <SPI_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000098 	.word	0x20000098
 8000ff0:	40003800 	.word	0x40003800

08000ff4 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f9f7 	bl	80013f4 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <Slave_GPIO_InterruptPinInit+0x48>)
 8001008:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800100a:	2306      	movs	r3, #6
 800100c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FE;
 800100e:	2305      	movs	r3, #5
 8001010:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PU;
 8001016:	2301      	movs	r3, #1
 8001018:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd31 	bl	8000a84 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, 15);
 8001022:	210f      	movs	r1, #15
 8001024:	2017      	movs	r0, #23
 8001026:	f7ff ff2f 	bl	8000e88 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800102a:	2101      	movs	r1, #1
 800102c:	2017      	movs	r0, #23
 800102e:	f7ff fee5 	bl	8000dfc <GPIO_IRQInterruptConfig>

}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020c00 	.word	0x40020c00

08001040 <main>:


int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOB, ENABLE);
 8001046:	2101      	movs	r1, #1
 8001048:	482e      	ldr	r0, [pc, #184]	; (8001104 <main+0xc4>)
 800104a:	f7ff fc31 	bl	80008b0 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOD, ENABLE);
 800104e:	2101      	movs	r1, #1
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <main+0xc8>)
 8001052:	f7ff fc2d 	bl	80008b0 <GPIO_PeriClockControl>

	SPI_PeriClockControl(SPI2, ENABLE);
 8001056:	2101      	movs	r1, #1
 8001058:	482c      	ldr	r0, [pc, #176]	; (800110c <main+0xcc>)
 800105a:	f7ff f919 	bl	8000290 <SPI_PeriClockControl>

	uint8_t dummy = 0xff;
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 8001062:	f7ff ffc7 	bl	8000ff4 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8001066:	f7ff ff73 	bl	8000f50 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800106a:	f7ff ff9f 	bl	8000fac <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 800106e:	2101      	movs	r1, #1
 8001070:	4826      	ldr	r0, [pc, #152]	; (800110c <main+0xcc>)
 8001072:	f7ff fb3c 	bl	80006ee <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 8001076:	2101      	movs	r1, #1
 8001078:	2024      	movs	r0, #36	; 0x24
 800107a:	f7ff fa27 	bl	80004cc <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <main+0xd0>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 8001084:	bf00      	nop
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <main+0xd4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0fa      	beq.n	8001086 <main+0x46>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 8001090:	2100      	movs	r1, #0
 8001092:	2017      	movs	r0, #23
 8001094:	f7ff feb2 	bl	8000dfc <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8001098:	2101      	movs	r1, #1
 800109a:	481c      	ldr	r0, [pc, #112]	; (800110c <main+0xcc>)
 800109c:	f7ff faf8 	bl	8000690 <SPI_PeripheralControl>


		while(!rcvStop)
 80010a0:	e012      	b.n	80010c8 <main+0x88>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80010a2:	bf00      	nop
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <main+0xd8>)
 80010ac:	f7ff faa6 	bl	80005fc <SPI_SendDataIT>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d0f6      	beq.n	80010a4 <main+0x64>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80010b6:	bf00      	nop
 80010b8:	2201      	movs	r2, #1
 80010ba:	4918      	ldr	r1, [pc, #96]	; (800111c <main+0xdc>)
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <main+0xd8>)
 80010be:	f7ff fac2 	bl	8000646 <SPI_ReceiveDataIT>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d0f7      	beq.n	80010b8 <main+0x78>
		while(!rcvStop)
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <main+0xd0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0e7      	beq.n	80010a2 <main+0x62>
		}


		// confirm SPI is not busy
		while( SPI_GetFlag(SPI2,SPI_FLAG_BSY) );
 80010d2:	bf00      	nop
 80010d4:	2107      	movs	r1, #7
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <main+0xcc>)
 80010d8:	f7ff faf5 	bl	80006c6 <SPI_GetFlag>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f8      	bne.n	80010d4 <main+0x94>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <main+0xcc>)
 80010e6:	f7ff fad3 	bl	8000690 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <main+0xe0>)
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <main+0xe4>)
 80010ee:	f000 f989 	bl	8001404 <iprintf>

		dataAvailable = 0;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <main+0xd4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 80010f8:	2101      	movs	r1, #1
 80010fa:	2017      	movs	r0, #23
 80010fc:	f7ff fe7e 	bl	8000dfc <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8001100:	e7bd      	b.n	800107e <main+0x3e>
 8001102:	bf00      	nop
 8001104:	40020400 	.word	0x40020400
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40003800 	.word	0x40003800
 8001110:	20000080 	.word	0x20000080
 8001114:	20000081 	.word	0x20000081
 8001118:	20000098 	.word	0x20000098
 800111c:	20000094 	.word	0x20000094
 8001120:	200000b8 	.word	0x200000b8
 8001124:	080021e0 	.word	0x080021e0

08001128 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <SPI2_IRQHandler+0x10>)
 800112e:	f7ff fa13 	bl	8000558 <SPI_IRQHandling>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000098 	.word	0x20000098

0800113c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d11f      	bne.n	800118e <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <SPI_ApplicationEventCallback+0x5c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	4910      	ldr	r1, [pc, #64]	; (8001198 <SPI_ApplicationEventCallback+0x5c>)
 8001156:	600a      	str	r2, [r1, #0]
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <SPI_ApplicationEventCallback+0x60>)
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	b2d1      	uxtb	r1, r2
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <SPI_ApplicationEventCallback+0x64>)
 8001160:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <SPI_ApplicationEventCallback+0x60>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <SPI_ApplicationEventCallback+0x3a>
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SPI_ApplicationEventCallback+0x5c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001174:	d10b      	bne.n	800118e <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <SPI_ApplicationEventCallback+0x68>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SPI_ApplicationEventCallback+0x5c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SPI_ApplicationEventCallback+0x64>)
 8001184:	2100      	movs	r1, #0
 8001186:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <SPI_ApplicationEventCallback+0x5c>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
				}
	}

}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000084 	.word	0x20000084
 800119c:	20000094 	.word	0x20000094
 80011a0:	200000b8 	.word	0x200000b8
 80011a4:	20000080 	.word	0x20000080

080011a8 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_6);
 80011ac:	2006      	movs	r0, #6
 80011ae:	f7ff feb5 	bl	8000f1c <GPIO_IRQHandling>
	dataAvailable = 1;
 80011b2:	4b02      	ldr	r3, [pc, #8]	; (80011bc <EXTI9_5_IRQHandler+0x14>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000081 	.word	0x20000081

080011c0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <ITM_SendChar+0x44>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <ITM_SendChar+0x44>)
 80011d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <ITM_SendChar+0x48>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <ITM_SendChar+0x48>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80011e2:	bf00      	nop
 80011e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f8      	beq.n	80011e4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80011f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	e000edfc 	.word	0xe000edfc
 8001208:	e0000e00 	.word	0xe0000e00

0800120c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
	}

return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e009      	b.n	800126c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffad 	bl	80011c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf1      	blt.n	8001258 <_write+0x12>
	}
	return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a4:	605a      	str	r2, [r3, #4]
	return 0;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f000 f846 	bl	80013a0 <__errno>
 8001314:	4602      	mov	r2, r0
 8001316:	230c      	movs	r3, #12
 8001318:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20020000 	.word	0x20020000
 8001340:	00000400 	.word	0x00000400
 8001344:	20000088 	.word	0x20000088
 8001348:	200002b0 	.word	0x200002b0

0800134c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137a:	f000 f817 	bl	80013ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff fe5f 	bl	8001040 <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001390:	08002290 	.word	0x08002290
  ldr r2, =_sbss
 8001394:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001398:	200002b0 	.word	0x200002b0

0800139c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC_IRQHandler>
	...

080013a0 <__errno>:
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <__errno+0x8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <__libc_init_array>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4e0d      	ldr	r6, [pc, #52]	; (80013e4 <__libc_init_array+0x38>)
 80013b0:	4c0d      	ldr	r4, [pc, #52]	; (80013e8 <__libc_init_array+0x3c>)
 80013b2:	1ba4      	subs	r4, r4, r6
 80013b4:	10a4      	asrs	r4, r4, #2
 80013b6:	2500      	movs	r5, #0
 80013b8:	42a5      	cmp	r5, r4
 80013ba:	d109      	bne.n	80013d0 <__libc_init_array+0x24>
 80013bc:	4e0b      	ldr	r6, [pc, #44]	; (80013ec <__libc_init_array+0x40>)
 80013be:	4c0c      	ldr	r4, [pc, #48]	; (80013f0 <__libc_init_array+0x44>)
 80013c0:	f000 ff02 	bl	80021c8 <_init>
 80013c4:	1ba4      	subs	r4, r4, r6
 80013c6:	10a4      	asrs	r4, r4, #2
 80013c8:	2500      	movs	r5, #0
 80013ca:	42a5      	cmp	r5, r4
 80013cc:	d105      	bne.n	80013da <__libc_init_array+0x2e>
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d4:	4798      	blx	r3
 80013d6:	3501      	adds	r5, #1
 80013d8:	e7ee      	b.n	80013b8 <__libc_init_array+0xc>
 80013da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013de:	4798      	blx	r3
 80013e0:	3501      	adds	r5, #1
 80013e2:	e7f2      	b.n	80013ca <__libc_init_array+0x1e>
 80013e4:	08002288 	.word	0x08002288
 80013e8:	08002288 	.word	0x08002288
 80013ec:	08002288 	.word	0x08002288
 80013f0:	0800228c 	.word	0x0800228c

080013f4 <memset>:
 80013f4:	4402      	add	r2, r0
 80013f6:	4603      	mov	r3, r0
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d100      	bne.n	80013fe <memset+0xa>
 80013fc:	4770      	bx	lr
 80013fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001402:	e7f9      	b.n	80013f8 <memset+0x4>

08001404 <iprintf>:
 8001404:	b40f      	push	{r0, r1, r2, r3}
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <iprintf+0x2c>)
 8001408:	b513      	push	{r0, r1, r4, lr}
 800140a:	681c      	ldr	r4, [r3, #0]
 800140c:	b124      	cbz	r4, 8001418 <iprintf+0x14>
 800140e:	69a3      	ldr	r3, [r4, #24]
 8001410:	b913      	cbnz	r3, 8001418 <iprintf+0x14>
 8001412:	4620      	mov	r0, r4
 8001414:	f000 f84e 	bl	80014b4 <__sinit>
 8001418:	ab05      	add	r3, sp, #20
 800141a:	9a04      	ldr	r2, [sp, #16]
 800141c:	68a1      	ldr	r1, [r4, #8]
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4620      	mov	r0, r4
 8001422:	f000 f953 	bl	80016cc <_vfiprintf_r>
 8001426:	b002      	add	sp, #8
 8001428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800142c:	b004      	add	sp, #16
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000

08001434 <std>:
 8001434:	2300      	movs	r3, #0
 8001436:	b510      	push	{r4, lr}
 8001438:	4604      	mov	r4, r0
 800143a:	e9c0 3300 	strd	r3, r3, [r0]
 800143e:	6083      	str	r3, [r0, #8]
 8001440:	8181      	strh	r1, [r0, #12]
 8001442:	6643      	str	r3, [r0, #100]	; 0x64
 8001444:	81c2      	strh	r2, [r0, #14]
 8001446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800144a:	6183      	str	r3, [r0, #24]
 800144c:	4619      	mov	r1, r3
 800144e:	2208      	movs	r2, #8
 8001450:	305c      	adds	r0, #92	; 0x5c
 8001452:	f7ff ffcf 	bl	80013f4 <memset>
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <std+0x38>)
 8001458:	6263      	str	r3, [r4, #36]	; 0x24
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <std+0x3c>)
 800145c:	62a3      	str	r3, [r4, #40]	; 0x28
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <std+0x40>)
 8001460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <std+0x44>)
 8001464:	6224      	str	r4, [r4, #32]
 8001466:	6323      	str	r3, [r4, #48]	; 0x30
 8001468:	bd10      	pop	{r4, pc}
 800146a:	bf00      	nop
 800146c:	08001c29 	.word	0x08001c29
 8001470:	08001c4b 	.word	0x08001c4b
 8001474:	08001c83 	.word	0x08001c83
 8001478:	08001ca7 	.word	0x08001ca7

0800147c <_cleanup_r>:
 800147c:	4901      	ldr	r1, [pc, #4]	; (8001484 <_cleanup_r+0x8>)
 800147e:	f000 b885 	b.w	800158c <_fwalk_reent>
 8001482:	bf00      	nop
 8001484:	08001f81 	.word	0x08001f81

08001488 <__sfmoreglue>:
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	1e4a      	subs	r2, r1, #1
 800148c:	2568      	movs	r5, #104	; 0x68
 800148e:	4355      	muls	r5, r2
 8001490:	460e      	mov	r6, r1
 8001492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001496:	f000 f897 	bl	80015c8 <_malloc_r>
 800149a:	4604      	mov	r4, r0
 800149c:	b140      	cbz	r0, 80014b0 <__sfmoreglue+0x28>
 800149e:	2100      	movs	r1, #0
 80014a0:	e9c0 1600 	strd	r1, r6, [r0]
 80014a4:	300c      	adds	r0, #12
 80014a6:	60a0      	str	r0, [r4, #8]
 80014a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014ac:	f7ff ffa2 	bl	80013f4 <memset>
 80014b0:	4620      	mov	r0, r4
 80014b2:	bd70      	pop	{r4, r5, r6, pc}

080014b4 <__sinit>:
 80014b4:	6983      	ldr	r3, [r0, #24]
 80014b6:	b510      	push	{r4, lr}
 80014b8:	4604      	mov	r4, r0
 80014ba:	bb33      	cbnz	r3, 800150a <__sinit+0x56>
 80014bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80014c0:	6503      	str	r3, [r0, #80]	; 0x50
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <__sinit+0x58>)
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <__sinit+0x5c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6282      	str	r2, [r0, #40]	; 0x28
 80014ca:	4298      	cmp	r0, r3
 80014cc:	bf04      	itt	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	6183      	streq	r3, [r0, #24]
 80014d2:	f000 f81f 	bl	8001514 <__sfp>
 80014d6:	6060      	str	r0, [r4, #4]
 80014d8:	4620      	mov	r0, r4
 80014da:	f000 f81b 	bl	8001514 <__sfp>
 80014de:	60a0      	str	r0, [r4, #8]
 80014e0:	4620      	mov	r0, r4
 80014e2:	f000 f817 	bl	8001514 <__sfp>
 80014e6:	2200      	movs	r2, #0
 80014e8:	60e0      	str	r0, [r4, #12]
 80014ea:	2104      	movs	r1, #4
 80014ec:	6860      	ldr	r0, [r4, #4]
 80014ee:	f7ff ffa1 	bl	8001434 <std>
 80014f2:	2201      	movs	r2, #1
 80014f4:	2109      	movs	r1, #9
 80014f6:	68a0      	ldr	r0, [r4, #8]
 80014f8:	f7ff ff9c 	bl	8001434 <std>
 80014fc:	2202      	movs	r2, #2
 80014fe:	2112      	movs	r1, #18
 8001500:	68e0      	ldr	r0, [r4, #12]
 8001502:	f7ff ff97 	bl	8001434 <std>
 8001506:	2301      	movs	r3, #1
 8001508:	61a3      	str	r3, [r4, #24]
 800150a:	bd10      	pop	{r4, pc}
 800150c:	080021f0 	.word	0x080021f0
 8001510:	0800147d 	.word	0x0800147d

08001514 <__sfp>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <__sfp+0x70>)
 8001518:	681e      	ldr	r6, [r3, #0]
 800151a:	69b3      	ldr	r3, [r6, #24]
 800151c:	4607      	mov	r7, r0
 800151e:	b913      	cbnz	r3, 8001526 <__sfp+0x12>
 8001520:	4630      	mov	r0, r6
 8001522:	f7ff ffc7 	bl	80014b4 <__sinit>
 8001526:	3648      	adds	r6, #72	; 0x48
 8001528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800152c:	3b01      	subs	r3, #1
 800152e:	d503      	bpl.n	8001538 <__sfp+0x24>
 8001530:	6833      	ldr	r3, [r6, #0]
 8001532:	b133      	cbz	r3, 8001542 <__sfp+0x2e>
 8001534:	6836      	ldr	r6, [r6, #0]
 8001536:	e7f7      	b.n	8001528 <__sfp+0x14>
 8001538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800153c:	b16d      	cbz	r5, 800155a <__sfp+0x46>
 800153e:	3468      	adds	r4, #104	; 0x68
 8001540:	e7f4      	b.n	800152c <__sfp+0x18>
 8001542:	2104      	movs	r1, #4
 8001544:	4638      	mov	r0, r7
 8001546:	f7ff ff9f 	bl	8001488 <__sfmoreglue>
 800154a:	6030      	str	r0, [r6, #0]
 800154c:	2800      	cmp	r0, #0
 800154e:	d1f1      	bne.n	8001534 <__sfp+0x20>
 8001550:	230c      	movs	r3, #12
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4604      	mov	r4, r0
 8001556:	4620      	mov	r0, r4
 8001558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <__sfp+0x74>)
 800155c:	6665      	str	r5, [r4, #100]	; 0x64
 800155e:	e9c4 5500 	strd	r5, r5, [r4]
 8001562:	60a5      	str	r5, [r4, #8]
 8001564:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001568:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800156c:	2208      	movs	r2, #8
 800156e:	4629      	mov	r1, r5
 8001570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001574:	f7ff ff3e 	bl	80013f4 <memset>
 8001578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800157c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001580:	e7e9      	b.n	8001556 <__sfp+0x42>
 8001582:	bf00      	nop
 8001584:	080021f0 	.word	0x080021f0
 8001588:	ffff0001 	.word	0xffff0001

0800158c <_fwalk_reent>:
 800158c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001590:	4680      	mov	r8, r0
 8001592:	4689      	mov	r9, r1
 8001594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001598:	2600      	movs	r6, #0
 800159a:	b914      	cbnz	r4, 80015a2 <_fwalk_reent+0x16>
 800159c:	4630      	mov	r0, r6
 800159e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80015a6:	3f01      	subs	r7, #1
 80015a8:	d501      	bpl.n	80015ae <_fwalk_reent+0x22>
 80015aa:	6824      	ldr	r4, [r4, #0]
 80015ac:	e7f5      	b.n	800159a <_fwalk_reent+0xe>
 80015ae:	89ab      	ldrh	r3, [r5, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d907      	bls.n	80015c4 <_fwalk_reent+0x38>
 80015b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015b8:	3301      	adds	r3, #1
 80015ba:	d003      	beq.n	80015c4 <_fwalk_reent+0x38>
 80015bc:	4629      	mov	r1, r5
 80015be:	4640      	mov	r0, r8
 80015c0:	47c8      	blx	r9
 80015c2:	4306      	orrs	r6, r0
 80015c4:	3568      	adds	r5, #104	; 0x68
 80015c6:	e7ee      	b.n	80015a6 <_fwalk_reent+0x1a>

080015c8 <_malloc_r>:
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	1ccd      	adds	r5, r1, #3
 80015cc:	f025 0503 	bic.w	r5, r5, #3
 80015d0:	3508      	adds	r5, #8
 80015d2:	2d0c      	cmp	r5, #12
 80015d4:	bf38      	it	cc
 80015d6:	250c      	movcc	r5, #12
 80015d8:	2d00      	cmp	r5, #0
 80015da:	4606      	mov	r6, r0
 80015dc:	db01      	blt.n	80015e2 <_malloc_r+0x1a>
 80015de:	42a9      	cmp	r1, r5
 80015e0:	d903      	bls.n	80015ea <_malloc_r+0x22>
 80015e2:	230c      	movs	r3, #12
 80015e4:	6033      	str	r3, [r6, #0]
 80015e6:	2000      	movs	r0, #0
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
 80015ea:	f000 fd69 	bl	80020c0 <__malloc_lock>
 80015ee:	4a21      	ldr	r2, [pc, #132]	; (8001674 <_malloc_r+0xac>)
 80015f0:	6814      	ldr	r4, [r2, #0]
 80015f2:	4621      	mov	r1, r4
 80015f4:	b991      	cbnz	r1, 800161c <_malloc_r+0x54>
 80015f6:	4c20      	ldr	r4, [pc, #128]	; (8001678 <_malloc_r+0xb0>)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	b91b      	cbnz	r3, 8001604 <_malloc_r+0x3c>
 80015fc:	4630      	mov	r0, r6
 80015fe:	f000 fb03 	bl	8001c08 <_sbrk_r>
 8001602:	6020      	str	r0, [r4, #0]
 8001604:	4629      	mov	r1, r5
 8001606:	4630      	mov	r0, r6
 8001608:	f000 fafe 	bl	8001c08 <_sbrk_r>
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	d124      	bne.n	800165a <_malloc_r+0x92>
 8001610:	230c      	movs	r3, #12
 8001612:	6033      	str	r3, [r6, #0]
 8001614:	4630      	mov	r0, r6
 8001616:	f000 fd54 	bl	80020c2 <__malloc_unlock>
 800161a:	e7e4      	b.n	80015e6 <_malloc_r+0x1e>
 800161c:	680b      	ldr	r3, [r1, #0]
 800161e:	1b5b      	subs	r3, r3, r5
 8001620:	d418      	bmi.n	8001654 <_malloc_r+0x8c>
 8001622:	2b0b      	cmp	r3, #11
 8001624:	d90f      	bls.n	8001646 <_malloc_r+0x7e>
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	50cd      	str	r5, [r1, r3]
 800162a:	18cc      	adds	r4, r1, r3
 800162c:	4630      	mov	r0, r6
 800162e:	f000 fd48 	bl	80020c2 <__malloc_unlock>
 8001632:	f104 000b 	add.w	r0, r4, #11
 8001636:	1d23      	adds	r3, r4, #4
 8001638:	f020 0007 	bic.w	r0, r0, #7
 800163c:	1ac3      	subs	r3, r0, r3
 800163e:	d0d3      	beq.n	80015e8 <_malloc_r+0x20>
 8001640:	425a      	negs	r2, r3
 8001642:	50e2      	str	r2, [r4, r3]
 8001644:	e7d0      	b.n	80015e8 <_malloc_r+0x20>
 8001646:	428c      	cmp	r4, r1
 8001648:	684b      	ldr	r3, [r1, #4]
 800164a:	bf16      	itet	ne
 800164c:	6063      	strne	r3, [r4, #4]
 800164e:	6013      	streq	r3, [r2, #0]
 8001650:	460c      	movne	r4, r1
 8001652:	e7eb      	b.n	800162c <_malloc_r+0x64>
 8001654:	460c      	mov	r4, r1
 8001656:	6849      	ldr	r1, [r1, #4]
 8001658:	e7cc      	b.n	80015f4 <_malloc_r+0x2c>
 800165a:	1cc4      	adds	r4, r0, #3
 800165c:	f024 0403 	bic.w	r4, r4, #3
 8001660:	42a0      	cmp	r0, r4
 8001662:	d005      	beq.n	8001670 <_malloc_r+0xa8>
 8001664:	1a21      	subs	r1, r4, r0
 8001666:	4630      	mov	r0, r6
 8001668:	f000 face 	bl	8001c08 <_sbrk_r>
 800166c:	3001      	adds	r0, #1
 800166e:	d0cf      	beq.n	8001610 <_malloc_r+0x48>
 8001670:	6025      	str	r5, [r4, #0]
 8001672:	e7db      	b.n	800162c <_malloc_r+0x64>
 8001674:	2000008c 	.word	0x2000008c
 8001678:	20000090 	.word	0x20000090

0800167c <__sfputc_r>:
 800167c:	6893      	ldr	r3, [r2, #8]
 800167e:	3b01      	subs	r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	b410      	push	{r4}
 8001684:	6093      	str	r3, [r2, #8]
 8001686:	da07      	bge.n	8001698 <__sfputc_r+0x1c>
 8001688:	6994      	ldr	r4, [r2, #24]
 800168a:	42a3      	cmp	r3, r4
 800168c:	db01      	blt.n	8001692 <__sfputc_r+0x16>
 800168e:	290a      	cmp	r1, #10
 8001690:	d102      	bne.n	8001698 <__sfputc_r+0x1c>
 8001692:	bc10      	pop	{r4}
 8001694:	f000 bb0c 	b.w	8001cb0 <__swbuf_r>
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	1c58      	adds	r0, r3, #1
 800169c:	6010      	str	r0, [r2, #0]
 800169e:	7019      	strb	r1, [r3, #0]
 80016a0:	4608      	mov	r0, r1
 80016a2:	bc10      	pop	{r4}
 80016a4:	4770      	bx	lr

080016a6 <__sfputs_r>:
 80016a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a8:	4606      	mov	r6, r0
 80016aa:	460f      	mov	r7, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	18d5      	adds	r5, r2, r3
 80016b0:	42ac      	cmp	r4, r5
 80016b2:	d101      	bne.n	80016b8 <__sfputs_r+0x12>
 80016b4:	2000      	movs	r0, #0
 80016b6:	e007      	b.n	80016c8 <__sfputs_r+0x22>
 80016b8:	463a      	mov	r2, r7
 80016ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016be:	4630      	mov	r0, r6
 80016c0:	f7ff ffdc 	bl	800167c <__sfputc_r>
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	d1f3      	bne.n	80016b0 <__sfputs_r+0xa>
 80016c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016cc <_vfiprintf_r>:
 80016cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d0:	460c      	mov	r4, r1
 80016d2:	b09d      	sub	sp, #116	; 0x74
 80016d4:	4617      	mov	r7, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	4606      	mov	r6, r0
 80016da:	b118      	cbz	r0, 80016e4 <_vfiprintf_r+0x18>
 80016dc:	6983      	ldr	r3, [r0, #24]
 80016de:	b90b      	cbnz	r3, 80016e4 <_vfiprintf_r+0x18>
 80016e0:	f7ff fee8 	bl	80014b4 <__sinit>
 80016e4:	4b7c      	ldr	r3, [pc, #496]	; (80018d8 <_vfiprintf_r+0x20c>)
 80016e6:	429c      	cmp	r4, r3
 80016e8:	d158      	bne.n	800179c <_vfiprintf_r+0xd0>
 80016ea:	6874      	ldr	r4, [r6, #4]
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	0718      	lsls	r0, r3, #28
 80016f0:	d55e      	bpl.n	80017b0 <_vfiprintf_r+0xe4>
 80016f2:	6923      	ldr	r3, [r4, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d05b      	beq.n	80017b0 <_vfiprintf_r+0xe4>
 80016f8:	2300      	movs	r3, #0
 80016fa:	9309      	str	r3, [sp, #36]	; 0x24
 80016fc:	2320      	movs	r3, #32
 80016fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001702:	2330      	movs	r3, #48	; 0x30
 8001704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001708:	9503      	str	r5, [sp, #12]
 800170a:	f04f 0b01 	mov.w	fp, #1
 800170e:	46b8      	mov	r8, r7
 8001710:	4645      	mov	r5, r8
 8001712:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001716:	b10b      	cbz	r3, 800171c <_vfiprintf_r+0x50>
 8001718:	2b25      	cmp	r3, #37	; 0x25
 800171a:	d154      	bne.n	80017c6 <_vfiprintf_r+0xfa>
 800171c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001720:	d00b      	beq.n	800173a <_vfiprintf_r+0x6e>
 8001722:	4653      	mov	r3, sl
 8001724:	463a      	mov	r2, r7
 8001726:	4621      	mov	r1, r4
 8001728:	4630      	mov	r0, r6
 800172a:	f7ff ffbc 	bl	80016a6 <__sfputs_r>
 800172e:	3001      	adds	r0, #1
 8001730:	f000 80c2 	beq.w	80018b8 <_vfiprintf_r+0x1ec>
 8001734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001736:	4453      	add	r3, sl
 8001738:	9309      	str	r3, [sp, #36]	; 0x24
 800173a:	f898 3000 	ldrb.w	r3, [r8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80ba 	beq.w	80018b8 <_vfiprintf_r+0x1ec>
 8001744:	2300      	movs	r3, #0
 8001746:	f04f 32ff 	mov.w	r2, #4294967295
 800174a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800174e:	9304      	str	r3, [sp, #16]
 8001750:	9307      	str	r3, [sp, #28]
 8001752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001756:	931a      	str	r3, [sp, #104]	; 0x68
 8001758:	46a8      	mov	r8, r5
 800175a:	2205      	movs	r2, #5
 800175c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001760:	485e      	ldr	r0, [pc, #376]	; (80018dc <_vfiprintf_r+0x210>)
 8001762:	f7fe fd45 	bl	80001f0 <memchr>
 8001766:	9b04      	ldr	r3, [sp, #16]
 8001768:	bb78      	cbnz	r0, 80017ca <_vfiprintf_r+0xfe>
 800176a:	06d9      	lsls	r1, r3, #27
 800176c:	bf44      	itt	mi
 800176e:	2220      	movmi	r2, #32
 8001770:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001774:	071a      	lsls	r2, r3, #28
 8001776:	bf44      	itt	mi
 8001778:	222b      	movmi	r2, #43	; 0x2b
 800177a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800177e:	782a      	ldrb	r2, [r5, #0]
 8001780:	2a2a      	cmp	r2, #42	; 0x2a
 8001782:	d02a      	beq.n	80017da <_vfiprintf_r+0x10e>
 8001784:	9a07      	ldr	r2, [sp, #28]
 8001786:	46a8      	mov	r8, r5
 8001788:	2000      	movs	r0, #0
 800178a:	250a      	movs	r5, #10
 800178c:	4641      	mov	r1, r8
 800178e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001792:	3b30      	subs	r3, #48	; 0x30
 8001794:	2b09      	cmp	r3, #9
 8001796:	d969      	bls.n	800186c <_vfiprintf_r+0x1a0>
 8001798:	b360      	cbz	r0, 80017f4 <_vfiprintf_r+0x128>
 800179a:	e024      	b.n	80017e6 <_vfiprintf_r+0x11a>
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <_vfiprintf_r+0x214>)
 800179e:	429c      	cmp	r4, r3
 80017a0:	d101      	bne.n	80017a6 <_vfiprintf_r+0xda>
 80017a2:	68b4      	ldr	r4, [r6, #8]
 80017a4:	e7a2      	b.n	80016ec <_vfiprintf_r+0x20>
 80017a6:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <_vfiprintf_r+0x218>)
 80017a8:	429c      	cmp	r4, r3
 80017aa:	bf08      	it	eq
 80017ac:	68f4      	ldreq	r4, [r6, #12]
 80017ae:	e79d      	b.n	80016ec <_vfiprintf_r+0x20>
 80017b0:	4621      	mov	r1, r4
 80017b2:	4630      	mov	r0, r6
 80017b4:	f000 fae0 	bl	8001d78 <__swsetup_r>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	d09d      	beq.n	80016f8 <_vfiprintf_r+0x2c>
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	b01d      	add	sp, #116	; 0x74
 80017c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c6:	46a8      	mov	r8, r5
 80017c8:	e7a2      	b.n	8001710 <_vfiprintf_r+0x44>
 80017ca:	4a44      	ldr	r2, [pc, #272]	; (80018dc <_vfiprintf_r+0x210>)
 80017cc:	1a80      	subs	r0, r0, r2
 80017ce:	fa0b f000 	lsl.w	r0, fp, r0
 80017d2:	4318      	orrs	r0, r3
 80017d4:	9004      	str	r0, [sp, #16]
 80017d6:	4645      	mov	r5, r8
 80017d8:	e7be      	b.n	8001758 <_vfiprintf_r+0x8c>
 80017da:	9a03      	ldr	r2, [sp, #12]
 80017dc:	1d11      	adds	r1, r2, #4
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	9103      	str	r1, [sp, #12]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	db01      	blt.n	80017ea <_vfiprintf_r+0x11e>
 80017e6:	9207      	str	r2, [sp, #28]
 80017e8:	e004      	b.n	80017f4 <_vfiprintf_r+0x128>
 80017ea:	4252      	negs	r2, r2
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	9207      	str	r2, [sp, #28]
 80017f2:	9304      	str	r3, [sp, #16]
 80017f4:	f898 3000 	ldrb.w	r3, [r8]
 80017f8:	2b2e      	cmp	r3, #46	; 0x2e
 80017fa:	d10e      	bne.n	800181a <_vfiprintf_r+0x14e>
 80017fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001800:	2b2a      	cmp	r3, #42	; 0x2a
 8001802:	d138      	bne.n	8001876 <_vfiprintf_r+0x1aa>
 8001804:	9b03      	ldr	r3, [sp, #12]
 8001806:	1d1a      	adds	r2, r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	9203      	str	r2, [sp, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfb8      	it	lt
 8001810:	f04f 33ff 	movlt.w	r3, #4294967295
 8001814:	f108 0802 	add.w	r8, r8, #2
 8001818:	9305      	str	r3, [sp, #20]
 800181a:	4d33      	ldr	r5, [pc, #204]	; (80018e8 <_vfiprintf_r+0x21c>)
 800181c:	f898 1000 	ldrb.w	r1, [r8]
 8001820:	2203      	movs	r2, #3
 8001822:	4628      	mov	r0, r5
 8001824:	f7fe fce4 	bl	80001f0 <memchr>
 8001828:	b140      	cbz	r0, 800183c <_vfiprintf_r+0x170>
 800182a:	2340      	movs	r3, #64	; 0x40
 800182c:	1b40      	subs	r0, r0, r5
 800182e:	fa03 f000 	lsl.w	r0, r3, r0
 8001832:	9b04      	ldr	r3, [sp, #16]
 8001834:	4303      	orrs	r3, r0
 8001836:	f108 0801 	add.w	r8, r8, #1
 800183a:	9304      	str	r3, [sp, #16]
 800183c:	f898 1000 	ldrb.w	r1, [r8]
 8001840:	482a      	ldr	r0, [pc, #168]	; (80018ec <_vfiprintf_r+0x220>)
 8001842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001846:	2206      	movs	r2, #6
 8001848:	f108 0701 	add.w	r7, r8, #1
 800184c:	f7fe fcd0 	bl	80001f0 <memchr>
 8001850:	2800      	cmp	r0, #0
 8001852:	d037      	beq.n	80018c4 <_vfiprintf_r+0x1f8>
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <_vfiprintf_r+0x224>)
 8001856:	bb1b      	cbnz	r3, 80018a0 <_vfiprintf_r+0x1d4>
 8001858:	9b03      	ldr	r3, [sp, #12]
 800185a:	3307      	adds	r3, #7
 800185c:	f023 0307 	bic.w	r3, r3, #7
 8001860:	3308      	adds	r3, #8
 8001862:	9303      	str	r3, [sp, #12]
 8001864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001866:	444b      	add	r3, r9
 8001868:	9309      	str	r3, [sp, #36]	; 0x24
 800186a:	e750      	b.n	800170e <_vfiprintf_r+0x42>
 800186c:	fb05 3202 	mla	r2, r5, r2, r3
 8001870:	2001      	movs	r0, #1
 8001872:	4688      	mov	r8, r1
 8001874:	e78a      	b.n	800178c <_vfiprintf_r+0xc0>
 8001876:	2300      	movs	r3, #0
 8001878:	f108 0801 	add.w	r8, r8, #1
 800187c:	9305      	str	r3, [sp, #20]
 800187e:	4619      	mov	r1, r3
 8001880:	250a      	movs	r5, #10
 8001882:	4640      	mov	r0, r8
 8001884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001888:	3a30      	subs	r2, #48	; 0x30
 800188a:	2a09      	cmp	r2, #9
 800188c:	d903      	bls.n	8001896 <_vfiprintf_r+0x1ca>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0c3      	beq.n	800181a <_vfiprintf_r+0x14e>
 8001892:	9105      	str	r1, [sp, #20]
 8001894:	e7c1      	b.n	800181a <_vfiprintf_r+0x14e>
 8001896:	fb05 2101 	mla	r1, r5, r1, r2
 800189a:	2301      	movs	r3, #1
 800189c:	4680      	mov	r8, r0
 800189e:	e7f0      	b.n	8001882 <_vfiprintf_r+0x1b6>
 80018a0:	ab03      	add	r3, sp, #12
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4622      	mov	r2, r4
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_vfiprintf_r+0x228>)
 80018a8:	a904      	add	r1, sp, #16
 80018aa:	4630      	mov	r0, r6
 80018ac:	f3af 8000 	nop.w
 80018b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018b4:	4681      	mov	r9, r0
 80018b6:	d1d5      	bne.n	8001864 <_vfiprintf_r+0x198>
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	065b      	lsls	r3, r3, #25
 80018bc:	f53f af7e 	bmi.w	80017bc <_vfiprintf_r+0xf0>
 80018c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018c2:	e77d      	b.n	80017c0 <_vfiprintf_r+0xf4>
 80018c4:	ab03      	add	r3, sp, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4622      	mov	r2, r4
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <_vfiprintf_r+0x228>)
 80018cc:	a904      	add	r1, sp, #16
 80018ce:	4630      	mov	r0, r6
 80018d0:	f000 f888 	bl	80019e4 <_printf_i>
 80018d4:	e7ec      	b.n	80018b0 <_vfiprintf_r+0x1e4>
 80018d6:	bf00      	nop
 80018d8:	08002214 	.word	0x08002214
 80018dc:	08002254 	.word	0x08002254
 80018e0:	08002234 	.word	0x08002234
 80018e4:	080021f4 	.word	0x080021f4
 80018e8:	0800225a 	.word	0x0800225a
 80018ec:	0800225e 	.word	0x0800225e
 80018f0:	00000000 	.word	0x00000000
 80018f4:	080016a7 	.word	0x080016a7

080018f8 <_printf_common>:
 80018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018fc:	4691      	mov	r9, r2
 80018fe:	461f      	mov	r7, r3
 8001900:	688a      	ldr	r2, [r1, #8]
 8001902:	690b      	ldr	r3, [r1, #16]
 8001904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001908:	4293      	cmp	r3, r2
 800190a:	bfb8      	it	lt
 800190c:	4613      	movlt	r3, r2
 800190e:	f8c9 3000 	str.w	r3, [r9]
 8001912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001916:	4606      	mov	r6, r0
 8001918:	460c      	mov	r4, r1
 800191a:	b112      	cbz	r2, 8001922 <_printf_common+0x2a>
 800191c:	3301      	adds	r3, #1
 800191e:	f8c9 3000 	str.w	r3, [r9]
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	0699      	lsls	r1, r3, #26
 8001926:	bf42      	ittt	mi
 8001928:	f8d9 3000 	ldrmi.w	r3, [r9]
 800192c:	3302      	addmi	r3, #2
 800192e:	f8c9 3000 	strmi.w	r3, [r9]
 8001932:	6825      	ldr	r5, [r4, #0]
 8001934:	f015 0506 	ands.w	r5, r5, #6
 8001938:	d107      	bne.n	800194a <_printf_common+0x52>
 800193a:	f104 0a19 	add.w	sl, r4, #25
 800193e:	68e3      	ldr	r3, [r4, #12]
 8001940:	f8d9 2000 	ldr.w	r2, [r9]
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	42ab      	cmp	r3, r5
 8001948:	dc28      	bgt.n	800199c <_printf_common+0xa4>
 800194a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	3300      	adds	r3, #0
 8001952:	bf18      	it	ne
 8001954:	2301      	movne	r3, #1
 8001956:	0692      	lsls	r2, r2, #26
 8001958:	d42d      	bmi.n	80019b6 <_printf_common+0xbe>
 800195a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800195e:	4639      	mov	r1, r7
 8001960:	4630      	mov	r0, r6
 8001962:	47c0      	blx	r8
 8001964:	3001      	adds	r0, #1
 8001966:	d020      	beq.n	80019aa <_printf_common+0xb2>
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	68e5      	ldr	r5, [r4, #12]
 800196c:	f8d9 2000 	ldr.w	r2, [r9]
 8001970:	f003 0306 	and.w	r3, r3, #6
 8001974:	2b04      	cmp	r3, #4
 8001976:	bf08      	it	eq
 8001978:	1aad      	subeq	r5, r5, r2
 800197a:	68a3      	ldr	r3, [r4, #8]
 800197c:	6922      	ldr	r2, [r4, #16]
 800197e:	bf0c      	ite	eq
 8001980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001984:	2500      	movne	r5, #0
 8001986:	4293      	cmp	r3, r2
 8001988:	bfc4      	itt	gt
 800198a:	1a9b      	subgt	r3, r3, r2
 800198c:	18ed      	addgt	r5, r5, r3
 800198e:	f04f 0900 	mov.w	r9, #0
 8001992:	341a      	adds	r4, #26
 8001994:	454d      	cmp	r5, r9
 8001996:	d11a      	bne.n	80019ce <_printf_common+0xd6>
 8001998:	2000      	movs	r0, #0
 800199a:	e008      	b.n	80019ae <_printf_common+0xb6>
 800199c:	2301      	movs	r3, #1
 800199e:	4652      	mov	r2, sl
 80019a0:	4639      	mov	r1, r7
 80019a2:	4630      	mov	r0, r6
 80019a4:	47c0      	blx	r8
 80019a6:	3001      	adds	r0, #1
 80019a8:	d103      	bne.n	80019b2 <_printf_common+0xba>
 80019aa:	f04f 30ff 	mov.w	r0, #4294967295
 80019ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019b2:	3501      	adds	r5, #1
 80019b4:	e7c3      	b.n	800193e <_printf_common+0x46>
 80019b6:	18e1      	adds	r1, r4, r3
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	2030      	movs	r0, #48	; 0x30
 80019bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019c0:	4422      	add	r2, r4
 80019c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019ca:	3302      	adds	r3, #2
 80019cc:	e7c5      	b.n	800195a <_printf_common+0x62>
 80019ce:	2301      	movs	r3, #1
 80019d0:	4622      	mov	r2, r4
 80019d2:	4639      	mov	r1, r7
 80019d4:	4630      	mov	r0, r6
 80019d6:	47c0      	blx	r8
 80019d8:	3001      	adds	r0, #1
 80019da:	d0e6      	beq.n	80019aa <_printf_common+0xb2>
 80019dc:	f109 0901 	add.w	r9, r9, #1
 80019e0:	e7d8      	b.n	8001994 <_printf_common+0x9c>
	...

080019e4 <_printf_i>:
 80019e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80019ec:	460c      	mov	r4, r1
 80019ee:	7e09      	ldrb	r1, [r1, #24]
 80019f0:	b085      	sub	sp, #20
 80019f2:	296e      	cmp	r1, #110	; 0x6e
 80019f4:	4617      	mov	r7, r2
 80019f6:	4606      	mov	r6, r0
 80019f8:	4698      	mov	r8, r3
 80019fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019fc:	f000 80b3 	beq.w	8001b66 <_printf_i+0x182>
 8001a00:	d822      	bhi.n	8001a48 <_printf_i+0x64>
 8001a02:	2963      	cmp	r1, #99	; 0x63
 8001a04:	d036      	beq.n	8001a74 <_printf_i+0x90>
 8001a06:	d80a      	bhi.n	8001a1e <_printf_i+0x3a>
 8001a08:	2900      	cmp	r1, #0
 8001a0a:	f000 80b9 	beq.w	8001b80 <_printf_i+0x19c>
 8001a0e:	2958      	cmp	r1, #88	; 0x58
 8001a10:	f000 8083 	beq.w	8001b1a <_printf_i+0x136>
 8001a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001a1c:	e032      	b.n	8001a84 <_printf_i+0xa0>
 8001a1e:	2964      	cmp	r1, #100	; 0x64
 8001a20:	d001      	beq.n	8001a26 <_printf_i+0x42>
 8001a22:	2969      	cmp	r1, #105	; 0x69
 8001a24:	d1f6      	bne.n	8001a14 <_printf_i+0x30>
 8001a26:	6820      	ldr	r0, [r4, #0]
 8001a28:	6813      	ldr	r3, [r2, #0]
 8001a2a:	0605      	lsls	r5, r0, #24
 8001a2c:	f103 0104 	add.w	r1, r3, #4
 8001a30:	d52a      	bpl.n	8001a88 <_printf_i+0xa4>
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6011      	str	r1, [r2, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da03      	bge.n	8001a42 <_printf_i+0x5e>
 8001a3a:	222d      	movs	r2, #45	; 0x2d
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a42:	486f      	ldr	r0, [pc, #444]	; (8001c00 <_printf_i+0x21c>)
 8001a44:	220a      	movs	r2, #10
 8001a46:	e039      	b.n	8001abc <_printf_i+0xd8>
 8001a48:	2973      	cmp	r1, #115	; 0x73
 8001a4a:	f000 809d 	beq.w	8001b88 <_printf_i+0x1a4>
 8001a4e:	d808      	bhi.n	8001a62 <_printf_i+0x7e>
 8001a50:	296f      	cmp	r1, #111	; 0x6f
 8001a52:	d020      	beq.n	8001a96 <_printf_i+0xb2>
 8001a54:	2970      	cmp	r1, #112	; 0x70
 8001a56:	d1dd      	bne.n	8001a14 <_printf_i+0x30>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	6023      	str	r3, [r4, #0]
 8001a60:	e003      	b.n	8001a6a <_printf_i+0x86>
 8001a62:	2975      	cmp	r1, #117	; 0x75
 8001a64:	d017      	beq.n	8001a96 <_printf_i+0xb2>
 8001a66:	2978      	cmp	r1, #120	; 0x78
 8001a68:	d1d4      	bne.n	8001a14 <_printf_i+0x30>
 8001a6a:	2378      	movs	r3, #120	; 0x78
 8001a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a70:	4864      	ldr	r0, [pc, #400]	; (8001c04 <_printf_i+0x220>)
 8001a72:	e055      	b.n	8001b20 <_printf_i+0x13c>
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	1d19      	adds	r1, r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6011      	str	r1, [r2, #0]
 8001a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a84:	2301      	movs	r3, #1
 8001a86:	e08c      	b.n	8001ba2 <_printf_i+0x1be>
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6011      	str	r1, [r2, #0]
 8001a8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a90:	bf18      	it	ne
 8001a92:	b21b      	sxthne	r3, r3
 8001a94:	e7cf      	b.n	8001a36 <_printf_i+0x52>
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	6825      	ldr	r5, [r4, #0]
 8001a9a:	1d18      	adds	r0, r3, #4
 8001a9c:	6010      	str	r0, [r2, #0]
 8001a9e:	0628      	lsls	r0, r5, #24
 8001aa0:	d501      	bpl.n	8001aa6 <_printf_i+0xc2>
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e002      	b.n	8001aac <_printf_i+0xc8>
 8001aa6:	0668      	lsls	r0, r5, #25
 8001aa8:	d5fb      	bpl.n	8001aa2 <_printf_i+0xbe>
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	4854      	ldr	r0, [pc, #336]	; (8001c00 <_printf_i+0x21c>)
 8001aae:	296f      	cmp	r1, #111	; 0x6f
 8001ab0:	bf14      	ite	ne
 8001ab2:	220a      	movne	r2, #10
 8001ab4:	2208      	moveq	r2, #8
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001abc:	6865      	ldr	r5, [r4, #4]
 8001abe:	60a5      	str	r5, [r4, #8]
 8001ac0:	2d00      	cmp	r5, #0
 8001ac2:	f2c0 8095 	blt.w	8001bf0 <_printf_i+0x20c>
 8001ac6:	6821      	ldr	r1, [r4, #0]
 8001ac8:	f021 0104 	bic.w	r1, r1, #4
 8001acc:	6021      	str	r1, [r4, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d13d      	bne.n	8001b4e <_printf_i+0x16a>
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	f040 808e 	bne.w	8001bf4 <_printf_i+0x210>
 8001ad8:	4665      	mov	r5, ip
 8001ada:	2a08      	cmp	r2, #8
 8001adc:	d10b      	bne.n	8001af6 <_printf_i+0x112>
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	07db      	lsls	r3, r3, #31
 8001ae2:	d508      	bpl.n	8001af6 <_printf_i+0x112>
 8001ae4:	6923      	ldr	r3, [r4, #16]
 8001ae6:	6862      	ldr	r2, [r4, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	bfde      	ittt	le
 8001aec:	2330      	movle	r3, #48	; 0x30
 8001aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001af6:	ebac 0305 	sub.w	r3, ip, r5
 8001afa:	6123      	str	r3, [r4, #16]
 8001afc:	f8cd 8000 	str.w	r8, [sp]
 8001b00:	463b      	mov	r3, r7
 8001b02:	aa03      	add	r2, sp, #12
 8001b04:	4621      	mov	r1, r4
 8001b06:	4630      	mov	r0, r6
 8001b08:	f7ff fef6 	bl	80018f8 <_printf_common>
 8001b0c:	3001      	adds	r0, #1
 8001b0e:	d14d      	bne.n	8001bac <_printf_i+0x1c8>
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	b005      	add	sp, #20
 8001b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b1a:	4839      	ldr	r0, [pc, #228]	; (8001c00 <_printf_i+0x21c>)
 8001b1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	6821      	ldr	r1, [r4, #0]
 8001b24:	1d1d      	adds	r5, r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6015      	str	r5, [r2, #0]
 8001b2a:	060a      	lsls	r2, r1, #24
 8001b2c:	d50b      	bpl.n	8001b46 <_printf_i+0x162>
 8001b2e:	07ca      	lsls	r2, r1, #31
 8001b30:	bf44      	itt	mi
 8001b32:	f041 0120 	orrmi.w	r1, r1, #32
 8001b36:	6021      	strmi	r1, [r4, #0]
 8001b38:	b91b      	cbnz	r3, 8001b42 <_printf_i+0x15e>
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	f022 0220 	bic.w	r2, r2, #32
 8001b40:	6022      	str	r2, [r4, #0]
 8001b42:	2210      	movs	r2, #16
 8001b44:	e7b7      	b.n	8001ab6 <_printf_i+0xd2>
 8001b46:	064d      	lsls	r5, r1, #25
 8001b48:	bf48      	it	mi
 8001b4a:	b29b      	uxthmi	r3, r3
 8001b4c:	e7ef      	b.n	8001b2e <_printf_i+0x14a>
 8001b4e:	4665      	mov	r5, ip
 8001b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b54:	fb02 3311 	mls	r3, r2, r1, r3
 8001b58:	5cc3      	ldrb	r3, [r0, r3]
 8001b5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b5e:	460b      	mov	r3, r1
 8001b60:	2900      	cmp	r1, #0
 8001b62:	d1f5      	bne.n	8001b50 <_printf_i+0x16c>
 8001b64:	e7b9      	b.n	8001ada <_printf_i+0xf6>
 8001b66:	6813      	ldr	r3, [r2, #0]
 8001b68:	6825      	ldr	r5, [r4, #0]
 8001b6a:	6961      	ldr	r1, [r4, #20]
 8001b6c:	1d18      	adds	r0, r3, #4
 8001b6e:	6010      	str	r0, [r2, #0]
 8001b70:	0628      	lsls	r0, r5, #24
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	d501      	bpl.n	8001b7a <_printf_i+0x196>
 8001b76:	6019      	str	r1, [r3, #0]
 8001b78:	e002      	b.n	8001b80 <_printf_i+0x19c>
 8001b7a:	066a      	lsls	r2, r5, #25
 8001b7c:	d5fb      	bpl.n	8001b76 <_printf_i+0x192>
 8001b7e:	8019      	strh	r1, [r3, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	6123      	str	r3, [r4, #16]
 8001b84:	4665      	mov	r5, ip
 8001b86:	e7b9      	b.n	8001afc <_printf_i+0x118>
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	1d19      	adds	r1, r3, #4
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	681d      	ldr	r5, [r3, #0]
 8001b90:	6862      	ldr	r2, [r4, #4]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4628      	mov	r0, r5
 8001b96:	f7fe fb2b 	bl	80001f0 <memchr>
 8001b9a:	b108      	cbz	r0, 8001ba0 <_printf_i+0x1bc>
 8001b9c:	1b40      	subs	r0, r0, r5
 8001b9e:	6060      	str	r0, [r4, #4]
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	6123      	str	r3, [r4, #16]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001baa:	e7a7      	b.n	8001afc <_printf_i+0x118>
 8001bac:	6923      	ldr	r3, [r4, #16]
 8001bae:	462a      	mov	r2, r5
 8001bb0:	4639      	mov	r1, r7
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	47c0      	blx	r8
 8001bb6:	3001      	adds	r0, #1
 8001bb8:	d0aa      	beq.n	8001b10 <_printf_i+0x12c>
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	079b      	lsls	r3, r3, #30
 8001bbe:	d413      	bmi.n	8001be8 <_printf_i+0x204>
 8001bc0:	68e0      	ldr	r0, [r4, #12]
 8001bc2:	9b03      	ldr	r3, [sp, #12]
 8001bc4:	4298      	cmp	r0, r3
 8001bc6:	bfb8      	it	lt
 8001bc8:	4618      	movlt	r0, r3
 8001bca:	e7a3      	b.n	8001b14 <_printf_i+0x130>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	464a      	mov	r2, r9
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	47c0      	blx	r8
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	d09a      	beq.n	8001b10 <_printf_i+0x12c>
 8001bda:	3501      	adds	r5, #1
 8001bdc:	68e3      	ldr	r3, [r4, #12]
 8001bde:	9a03      	ldr	r2, [sp, #12]
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	42ab      	cmp	r3, r5
 8001be4:	dcf2      	bgt.n	8001bcc <_printf_i+0x1e8>
 8001be6:	e7eb      	b.n	8001bc0 <_printf_i+0x1dc>
 8001be8:	2500      	movs	r5, #0
 8001bea:	f104 0919 	add.w	r9, r4, #25
 8001bee:	e7f5      	b.n	8001bdc <_printf_i+0x1f8>
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ac      	bne.n	8001b4e <_printf_i+0x16a>
 8001bf4:	7803      	ldrb	r3, [r0, #0]
 8001bf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bfe:	e76c      	b.n	8001ada <_printf_i+0xf6>
 8001c00:	08002265 	.word	0x08002265
 8001c04:	08002276 	.word	0x08002276

08001c08 <_sbrk_r>:
 8001c08:	b538      	push	{r3, r4, r5, lr}
 8001c0a:	4c06      	ldr	r4, [pc, #24]	; (8001c24 <_sbrk_r+0x1c>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4605      	mov	r5, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	6023      	str	r3, [r4, #0]
 8001c14:	f7ff fb64 	bl	80012e0 <_sbrk>
 8001c18:	1c43      	adds	r3, r0, #1
 8001c1a:	d102      	bne.n	8001c22 <_sbrk_r+0x1a>
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	b103      	cbz	r3, 8001c22 <_sbrk_r+0x1a>
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
 8001c24:	200002ac 	.word	0x200002ac

08001c28 <__sread>:
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c30:	f000 fa96 	bl	8002160 <_read_r>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	bfab      	itete	ge
 8001c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c3c:	181b      	addge	r3, r3, r0
 8001c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c42:	bfac      	ite	ge
 8001c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c46:	81a3      	strhlt	r3, [r4, #12]
 8001c48:	bd10      	pop	{r4, pc}

08001c4a <__swrite>:
 8001c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4e:	461f      	mov	r7, r3
 8001c50:	898b      	ldrh	r3, [r1, #12]
 8001c52:	05db      	lsls	r3, r3, #23
 8001c54:	4605      	mov	r5, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4616      	mov	r6, r2
 8001c5a:	d505      	bpl.n	8001c68 <__swrite+0x1e>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c64:	f000 f9b6 	bl	8001fd4 <_lseek_r>
 8001c68:	89a3      	ldrh	r3, [r4, #12]
 8001c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c72:	81a3      	strh	r3, [r4, #12]
 8001c74:	4632      	mov	r2, r6
 8001c76:	463b      	mov	r3, r7
 8001c78:	4628      	mov	r0, r5
 8001c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7e:	f000 b869 	b.w	8001d54 <_write_r>

08001c82 <__sseek>:
 8001c82:	b510      	push	{r4, lr}
 8001c84:	460c      	mov	r4, r1
 8001c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c8a:	f000 f9a3 	bl	8001fd4 <_lseek_r>
 8001c8e:	1c43      	adds	r3, r0, #1
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	bf15      	itete	ne
 8001c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c9e:	81a3      	strheq	r3, [r4, #12]
 8001ca0:	bf18      	it	ne
 8001ca2:	81a3      	strhne	r3, [r4, #12]
 8001ca4:	bd10      	pop	{r4, pc}

08001ca6 <__sclose>:
 8001ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001caa:	f000 b8d3 	b.w	8001e54 <_close_r>
	...

08001cb0 <__swbuf_r>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	460e      	mov	r6, r1
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	b118      	cbz	r0, 8001cc2 <__swbuf_r+0x12>
 8001cba:	6983      	ldr	r3, [r0, #24]
 8001cbc:	b90b      	cbnz	r3, 8001cc2 <__swbuf_r+0x12>
 8001cbe:	f7ff fbf9 	bl	80014b4 <__sinit>
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <__swbuf_r+0x98>)
 8001cc4:	429c      	cmp	r4, r3
 8001cc6:	d12a      	bne.n	8001d1e <__swbuf_r+0x6e>
 8001cc8:	686c      	ldr	r4, [r5, #4]
 8001cca:	69a3      	ldr	r3, [r4, #24]
 8001ccc:	60a3      	str	r3, [r4, #8]
 8001cce:	89a3      	ldrh	r3, [r4, #12]
 8001cd0:	071a      	lsls	r2, r3, #28
 8001cd2:	d52e      	bpl.n	8001d32 <__swbuf_r+0x82>
 8001cd4:	6923      	ldr	r3, [r4, #16]
 8001cd6:	b363      	cbz	r3, 8001d32 <__swbuf_r+0x82>
 8001cd8:	6923      	ldr	r3, [r4, #16]
 8001cda:	6820      	ldr	r0, [r4, #0]
 8001cdc:	1ac0      	subs	r0, r0, r3
 8001cde:	6963      	ldr	r3, [r4, #20]
 8001ce0:	b2f6      	uxtb	r6, r6
 8001ce2:	4283      	cmp	r3, r0
 8001ce4:	4637      	mov	r7, r6
 8001ce6:	dc04      	bgt.n	8001cf2 <__swbuf_r+0x42>
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4628      	mov	r0, r5
 8001cec:	f000 f948 	bl	8001f80 <_fflush_r>
 8001cf0:	bb28      	cbnz	r0, 8001d3e <__swbuf_r+0x8e>
 8001cf2:	68a3      	ldr	r3, [r4, #8]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60a3      	str	r3, [r4, #8]
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	6022      	str	r2, [r4, #0]
 8001cfe:	701e      	strb	r6, [r3, #0]
 8001d00:	6963      	ldr	r3, [r4, #20]
 8001d02:	3001      	adds	r0, #1
 8001d04:	4283      	cmp	r3, r0
 8001d06:	d004      	beq.n	8001d12 <__swbuf_r+0x62>
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	07db      	lsls	r3, r3, #31
 8001d0c:	d519      	bpl.n	8001d42 <__swbuf_r+0x92>
 8001d0e:	2e0a      	cmp	r6, #10
 8001d10:	d117      	bne.n	8001d42 <__swbuf_r+0x92>
 8001d12:	4621      	mov	r1, r4
 8001d14:	4628      	mov	r0, r5
 8001d16:	f000 f933 	bl	8001f80 <_fflush_r>
 8001d1a:	b190      	cbz	r0, 8001d42 <__swbuf_r+0x92>
 8001d1c:	e00f      	b.n	8001d3e <__swbuf_r+0x8e>
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <__swbuf_r+0x9c>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d101      	bne.n	8001d28 <__swbuf_r+0x78>
 8001d24:	68ac      	ldr	r4, [r5, #8]
 8001d26:	e7d0      	b.n	8001cca <__swbuf_r+0x1a>
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <__swbuf_r+0xa0>)
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	bf08      	it	eq
 8001d2e:	68ec      	ldreq	r4, [r5, #12]
 8001d30:	e7cb      	b.n	8001cca <__swbuf_r+0x1a>
 8001d32:	4621      	mov	r1, r4
 8001d34:	4628      	mov	r0, r5
 8001d36:	f000 f81f 	bl	8001d78 <__swsetup_r>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d0cc      	beq.n	8001cd8 <__swbuf_r+0x28>
 8001d3e:	f04f 37ff 	mov.w	r7, #4294967295
 8001d42:	4638      	mov	r0, r7
 8001d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	08002214 	.word	0x08002214
 8001d4c:	08002234 	.word	0x08002234
 8001d50:	080021f4 	.word	0x080021f4

08001d54 <_write_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4c07      	ldr	r4, [pc, #28]	; (8001d74 <_write_r+0x20>)
 8001d58:	4605      	mov	r5, r0
 8001d5a:	4608      	mov	r0, r1
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	6022      	str	r2, [r4, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f7ff fa6f 	bl	8001246 <_write>
 8001d68:	1c43      	adds	r3, r0, #1
 8001d6a:	d102      	bne.n	8001d72 <_write_r+0x1e>
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	b103      	cbz	r3, 8001d72 <_write_r+0x1e>
 8001d70:	602b      	str	r3, [r5, #0]
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
 8001d74:	200002ac 	.word	0x200002ac

08001d78 <__swsetup_r>:
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <__swsetup_r+0xcc>)
 8001d7a:	b570      	push	{r4, r5, r6, lr}
 8001d7c:	681d      	ldr	r5, [r3, #0]
 8001d7e:	4606      	mov	r6, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	b125      	cbz	r5, 8001d8e <__swsetup_r+0x16>
 8001d84:	69ab      	ldr	r3, [r5, #24]
 8001d86:	b913      	cbnz	r3, 8001d8e <__swsetup_r+0x16>
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f7ff fb93 	bl	80014b4 <__sinit>
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <__swsetup_r+0xd0>)
 8001d90:	429c      	cmp	r4, r3
 8001d92:	d10f      	bne.n	8001db4 <__swsetup_r+0x3c>
 8001d94:	686c      	ldr	r4, [r5, #4]
 8001d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	0715      	lsls	r5, r2, #28
 8001d9e:	d42c      	bmi.n	8001dfa <__swsetup_r+0x82>
 8001da0:	06d0      	lsls	r0, r2, #27
 8001da2:	d411      	bmi.n	8001dc8 <__swsetup_r+0x50>
 8001da4:	2209      	movs	r2, #9
 8001da6:	6032      	str	r2, [r6, #0]
 8001da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	e03e      	b.n	8001e32 <__swsetup_r+0xba>
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <__swsetup_r+0xd4>)
 8001db6:	429c      	cmp	r4, r3
 8001db8:	d101      	bne.n	8001dbe <__swsetup_r+0x46>
 8001dba:	68ac      	ldr	r4, [r5, #8]
 8001dbc:	e7eb      	b.n	8001d96 <__swsetup_r+0x1e>
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <__swsetup_r+0xd8>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	bf08      	it	eq
 8001dc4:	68ec      	ldreq	r4, [r5, #12]
 8001dc6:	e7e6      	b.n	8001d96 <__swsetup_r+0x1e>
 8001dc8:	0751      	lsls	r1, r2, #29
 8001dca:	d512      	bpl.n	8001df2 <__swsetup_r+0x7a>
 8001dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dce:	b141      	cbz	r1, 8001de2 <__swsetup_r+0x6a>
 8001dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dd4:	4299      	cmp	r1, r3
 8001dd6:	d002      	beq.n	8001dde <__swsetup_r+0x66>
 8001dd8:	4630      	mov	r0, r6
 8001dda:	f000 f973 	bl	80020c4 <_free_r>
 8001dde:	2300      	movs	r3, #0
 8001de0:	6363      	str	r3, [r4, #52]	; 0x34
 8001de2:	89a3      	ldrh	r3, [r4, #12]
 8001de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001de8:	81a3      	strh	r3, [r4, #12]
 8001dea:	2300      	movs	r3, #0
 8001dec:	6063      	str	r3, [r4, #4]
 8001dee:	6923      	ldr	r3, [r4, #16]
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	81a3      	strh	r3, [r4, #12]
 8001dfa:	6923      	ldr	r3, [r4, #16]
 8001dfc:	b94b      	cbnz	r3, 8001e12 <__swsetup_r+0x9a>
 8001dfe:	89a3      	ldrh	r3, [r4, #12]
 8001e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e08:	d003      	beq.n	8001e12 <__swsetup_r+0x9a>
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f000 f917 	bl	8002040 <__smakebuf_r>
 8001e12:	89a2      	ldrh	r2, [r4, #12]
 8001e14:	f012 0301 	ands.w	r3, r2, #1
 8001e18:	d00c      	beq.n	8001e34 <__swsetup_r+0xbc>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60a3      	str	r3, [r4, #8]
 8001e1e:	6963      	ldr	r3, [r4, #20]
 8001e20:	425b      	negs	r3, r3
 8001e22:	61a3      	str	r3, [r4, #24]
 8001e24:	6923      	ldr	r3, [r4, #16]
 8001e26:	b953      	cbnz	r3, 8001e3e <__swsetup_r+0xc6>
 8001e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001e30:	d1ba      	bne.n	8001da8 <__swsetup_r+0x30>
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	0792      	lsls	r2, r2, #30
 8001e36:	bf58      	it	pl
 8001e38:	6963      	ldrpl	r3, [r4, #20]
 8001e3a:	60a3      	str	r3, [r4, #8]
 8001e3c:	e7f2      	b.n	8001e24 <__swsetup_r+0xac>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e7f7      	b.n	8001e32 <__swsetup_r+0xba>
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000
 8001e48:	08002214 	.word	0x08002214
 8001e4c:	08002234 	.word	0x08002234
 8001e50:	080021f4 	.word	0x080021f4

08001e54 <_close_r>:
 8001e54:	b538      	push	{r3, r4, r5, lr}
 8001e56:	4c06      	ldr	r4, [pc, #24]	; (8001e70 <_close_r+0x1c>)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	6023      	str	r3, [r4, #0]
 8001e60:	f7ff fa0d 	bl	800127e <_close>
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	d102      	bne.n	8001e6e <_close_r+0x1a>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	b103      	cbz	r3, 8001e6e <_close_r+0x1a>
 8001e6c:	602b      	str	r3, [r5, #0]
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
 8001e70:	200002ac 	.word	0x200002ac

08001e74 <__sflush_r>:
 8001e74:	898a      	ldrh	r2, [r1, #12]
 8001e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7a:	4605      	mov	r5, r0
 8001e7c:	0710      	lsls	r0, r2, #28
 8001e7e:	460c      	mov	r4, r1
 8001e80:	d458      	bmi.n	8001f34 <__sflush_r+0xc0>
 8001e82:	684b      	ldr	r3, [r1, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dc05      	bgt.n	8001e94 <__sflush_r+0x20>
 8001e88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	dc02      	bgt.n	8001e94 <__sflush_r+0x20>
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e96:	2e00      	cmp	r6, #0
 8001e98:	d0f9      	beq.n	8001e8e <__sflush_r+0x1a>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ea0:	682f      	ldr	r7, [r5, #0]
 8001ea2:	6a21      	ldr	r1, [r4, #32]
 8001ea4:	602b      	str	r3, [r5, #0]
 8001ea6:	d032      	beq.n	8001f0e <__sflush_r+0x9a>
 8001ea8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001eaa:	89a3      	ldrh	r3, [r4, #12]
 8001eac:	075a      	lsls	r2, r3, #29
 8001eae:	d505      	bpl.n	8001ebc <__sflush_r+0x48>
 8001eb0:	6863      	ldr	r3, [r4, #4]
 8001eb2:	1ac0      	subs	r0, r0, r3
 8001eb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eb6:	b10b      	cbz	r3, 8001ebc <__sflush_r+0x48>
 8001eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eba:	1ac0      	subs	r0, r0, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ec2:	6a21      	ldr	r1, [r4, #32]
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	47b0      	blx	r6
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	89a3      	ldrh	r3, [r4, #12]
 8001ecc:	d106      	bne.n	8001edc <__sflush_r+0x68>
 8001ece:	6829      	ldr	r1, [r5, #0]
 8001ed0:	291d      	cmp	r1, #29
 8001ed2:	d848      	bhi.n	8001f66 <__sflush_r+0xf2>
 8001ed4:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <__sflush_r+0x108>)
 8001ed6:	40ca      	lsrs	r2, r1
 8001ed8:	07d6      	lsls	r6, r2, #31
 8001eda:	d544      	bpl.n	8001f66 <__sflush_r+0xf2>
 8001edc:	2200      	movs	r2, #0
 8001ede:	6062      	str	r2, [r4, #4]
 8001ee0:	04d9      	lsls	r1, r3, #19
 8001ee2:	6922      	ldr	r2, [r4, #16]
 8001ee4:	6022      	str	r2, [r4, #0]
 8001ee6:	d504      	bpl.n	8001ef2 <__sflush_r+0x7e>
 8001ee8:	1c42      	adds	r2, r0, #1
 8001eea:	d101      	bne.n	8001ef0 <__sflush_r+0x7c>
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	b903      	cbnz	r3, 8001ef2 <__sflush_r+0x7e>
 8001ef0:	6560      	str	r0, [r4, #84]	; 0x54
 8001ef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ef4:	602f      	str	r7, [r5, #0]
 8001ef6:	2900      	cmp	r1, #0
 8001ef8:	d0c9      	beq.n	8001e8e <__sflush_r+0x1a>
 8001efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001efe:	4299      	cmp	r1, r3
 8001f00:	d002      	beq.n	8001f08 <__sflush_r+0x94>
 8001f02:	4628      	mov	r0, r5
 8001f04:	f000 f8de 	bl	80020c4 <_free_r>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	6360      	str	r0, [r4, #52]	; 0x34
 8001f0c:	e7c0      	b.n	8001e90 <__sflush_r+0x1c>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	4628      	mov	r0, r5
 8001f12:	47b0      	blx	r6
 8001f14:	1c41      	adds	r1, r0, #1
 8001f16:	d1c8      	bne.n	8001eaa <__sflush_r+0x36>
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0c5      	beq.n	8001eaa <__sflush_r+0x36>
 8001f1e:	2b1d      	cmp	r3, #29
 8001f20:	d001      	beq.n	8001f26 <__sflush_r+0xb2>
 8001f22:	2b16      	cmp	r3, #22
 8001f24:	d101      	bne.n	8001f2a <__sflush_r+0xb6>
 8001f26:	602f      	str	r7, [r5, #0]
 8001f28:	e7b1      	b.n	8001e8e <__sflush_r+0x1a>
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f30:	81a3      	strh	r3, [r4, #12]
 8001f32:	e7ad      	b.n	8001e90 <__sflush_r+0x1c>
 8001f34:	690f      	ldr	r7, [r1, #16]
 8001f36:	2f00      	cmp	r7, #0
 8001f38:	d0a9      	beq.n	8001e8e <__sflush_r+0x1a>
 8001f3a:	0793      	lsls	r3, r2, #30
 8001f3c:	680e      	ldr	r6, [r1, #0]
 8001f3e:	bf08      	it	eq
 8001f40:	694b      	ldreq	r3, [r1, #20]
 8001f42:	600f      	str	r7, [r1, #0]
 8001f44:	bf18      	it	ne
 8001f46:	2300      	movne	r3, #0
 8001f48:	eba6 0807 	sub.w	r8, r6, r7
 8001f4c:	608b      	str	r3, [r1, #8]
 8001f4e:	f1b8 0f00 	cmp.w	r8, #0
 8001f52:	dd9c      	ble.n	8001e8e <__sflush_r+0x1a>
 8001f54:	4643      	mov	r3, r8
 8001f56:	463a      	mov	r2, r7
 8001f58:	6a21      	ldr	r1, [r4, #32]
 8001f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	47b0      	blx	r6
 8001f60:	2800      	cmp	r0, #0
 8001f62:	dc06      	bgt.n	8001f72 <__sflush_r+0xfe>
 8001f64:	89a3      	ldrh	r3, [r4, #12]
 8001f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6a:	81a3      	strh	r3, [r4, #12]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	e78e      	b.n	8001e90 <__sflush_r+0x1c>
 8001f72:	4407      	add	r7, r0
 8001f74:	eba8 0800 	sub.w	r8, r8, r0
 8001f78:	e7e9      	b.n	8001f4e <__sflush_r+0xda>
 8001f7a:	bf00      	nop
 8001f7c:	20400001 	.word	0x20400001

08001f80 <_fflush_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	690b      	ldr	r3, [r1, #16]
 8001f84:	4605      	mov	r5, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	b1db      	cbz	r3, 8001fc2 <_fflush_r+0x42>
 8001f8a:	b118      	cbz	r0, 8001f94 <_fflush_r+0x14>
 8001f8c:	6983      	ldr	r3, [r0, #24]
 8001f8e:	b90b      	cbnz	r3, 8001f94 <_fflush_r+0x14>
 8001f90:	f7ff fa90 	bl	80014b4 <__sinit>
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <_fflush_r+0x48>)
 8001f96:	429c      	cmp	r4, r3
 8001f98:	d109      	bne.n	8001fae <_fflush_r+0x2e>
 8001f9a:	686c      	ldr	r4, [r5, #4]
 8001f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa0:	b17b      	cbz	r3, 8001fc2 <_fflush_r+0x42>
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001faa:	f7ff bf63 	b.w	8001e74 <__sflush_r>
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_fflush_r+0x4c>)
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	d101      	bne.n	8001fb8 <_fflush_r+0x38>
 8001fb4:	68ac      	ldr	r4, [r5, #8]
 8001fb6:	e7f1      	b.n	8001f9c <_fflush_r+0x1c>
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <_fflush_r+0x50>)
 8001fba:	429c      	cmp	r4, r3
 8001fbc:	bf08      	it	eq
 8001fbe:	68ec      	ldreq	r4, [r5, #12]
 8001fc0:	e7ec      	b.n	8001f9c <_fflush_r+0x1c>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08002214 	.word	0x08002214
 8001fcc:	08002234 	.word	0x08002234
 8001fd0:	080021f4 	.word	0x080021f4

08001fd4 <_lseek_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4c07      	ldr	r4, [pc, #28]	; (8001ff4 <_lseek_r+0x20>)
 8001fd8:	4605      	mov	r5, r0
 8001fda:	4608      	mov	r0, r1
 8001fdc:	4611      	mov	r1, r2
 8001fde:	2200      	movs	r2, #0
 8001fe0:	6022      	str	r2, [r4, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f7ff f96f 	bl	80012c6 <_lseek>
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	d102      	bne.n	8001ff2 <_lseek_r+0x1e>
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	b103      	cbz	r3, 8001ff2 <_lseek_r+0x1e>
 8001ff0:	602b      	str	r3, [r5, #0]
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	200002ac 	.word	0x200002ac

08001ff8 <__swhatbuf_r>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	460e      	mov	r6, r1
 8001ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002000:	2900      	cmp	r1, #0
 8002002:	b096      	sub	sp, #88	; 0x58
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	da07      	bge.n	800201a <__swhatbuf_r+0x22>
 800200a:	2300      	movs	r3, #0
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	89b3      	ldrh	r3, [r6, #12]
 8002010:	061a      	lsls	r2, r3, #24
 8002012:	d410      	bmi.n	8002036 <__swhatbuf_r+0x3e>
 8002014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002018:	e00e      	b.n	8002038 <__swhatbuf_r+0x40>
 800201a:	466a      	mov	r2, sp
 800201c:	f000 f8b2 	bl	8002184 <_fstat_r>
 8002020:	2800      	cmp	r0, #0
 8002022:	dbf2      	blt.n	800200a <__swhatbuf_r+0x12>
 8002024:	9a01      	ldr	r2, [sp, #4]
 8002026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800202a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800202e:	425a      	negs	r2, r3
 8002030:	415a      	adcs	r2, r3
 8002032:	602a      	str	r2, [r5, #0]
 8002034:	e7ee      	b.n	8002014 <__swhatbuf_r+0x1c>
 8002036:	2340      	movs	r3, #64	; 0x40
 8002038:	2000      	movs	r0, #0
 800203a:	6023      	str	r3, [r4, #0]
 800203c:	b016      	add	sp, #88	; 0x58
 800203e:	bd70      	pop	{r4, r5, r6, pc}

08002040 <__smakebuf_r>:
 8002040:	898b      	ldrh	r3, [r1, #12]
 8002042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002044:	079d      	lsls	r5, r3, #30
 8002046:	4606      	mov	r6, r0
 8002048:	460c      	mov	r4, r1
 800204a:	d507      	bpl.n	800205c <__smakebuf_r+0x1c>
 800204c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	6123      	str	r3, [r4, #16]
 8002054:	2301      	movs	r3, #1
 8002056:	6163      	str	r3, [r4, #20]
 8002058:	b002      	add	sp, #8
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	ab01      	add	r3, sp, #4
 800205e:	466a      	mov	r2, sp
 8002060:	f7ff ffca 	bl	8001ff8 <__swhatbuf_r>
 8002064:	9900      	ldr	r1, [sp, #0]
 8002066:	4605      	mov	r5, r0
 8002068:	4630      	mov	r0, r6
 800206a:	f7ff faad 	bl	80015c8 <_malloc_r>
 800206e:	b948      	cbnz	r0, 8002084 <__smakebuf_r+0x44>
 8002070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002074:	059a      	lsls	r2, r3, #22
 8002076:	d4ef      	bmi.n	8002058 <__smakebuf_r+0x18>
 8002078:	f023 0303 	bic.w	r3, r3, #3
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	81a3      	strh	r3, [r4, #12]
 8002082:	e7e3      	b.n	800204c <__smakebuf_r+0xc>
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <__smakebuf_r+0x7c>)
 8002086:	62b3      	str	r3, [r6, #40]	; 0x28
 8002088:	89a3      	ldrh	r3, [r4, #12]
 800208a:	6020      	str	r0, [r4, #0]
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	9b00      	ldr	r3, [sp, #0]
 8002094:	6163      	str	r3, [r4, #20]
 8002096:	9b01      	ldr	r3, [sp, #4]
 8002098:	6120      	str	r0, [r4, #16]
 800209a:	b15b      	cbz	r3, 80020b4 <__smakebuf_r+0x74>
 800209c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020a0:	4630      	mov	r0, r6
 80020a2:	f000 f881 	bl	80021a8 <_isatty_r>
 80020a6:	b128      	cbz	r0, 80020b4 <__smakebuf_r+0x74>
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	431d      	orrs	r5, r3
 80020b8:	81a5      	strh	r5, [r4, #12]
 80020ba:	e7cd      	b.n	8002058 <__smakebuf_r+0x18>
 80020bc:	0800147d 	.word	0x0800147d

080020c0 <__malloc_lock>:
 80020c0:	4770      	bx	lr

080020c2 <__malloc_unlock>:
 80020c2:	4770      	bx	lr

080020c4 <_free_r>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4605      	mov	r5, r0
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d045      	beq.n	8002158 <_free_r+0x94>
 80020cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020d0:	1f0c      	subs	r4, r1, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bfb8      	it	lt
 80020d6:	18e4      	addlt	r4, r4, r3
 80020d8:	f7ff fff2 	bl	80020c0 <__malloc_lock>
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <_free_r+0x98>)
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	4610      	mov	r0, r2
 80020e2:	b933      	cbnz	r3, 80020f2 <_free_r+0x2e>
 80020e4:	6063      	str	r3, [r4, #4]
 80020e6:	6014      	str	r4, [r2, #0]
 80020e8:	4628      	mov	r0, r5
 80020ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ee:	f7ff bfe8 	b.w	80020c2 <__malloc_unlock>
 80020f2:	42a3      	cmp	r3, r4
 80020f4:	d90c      	bls.n	8002110 <_free_r+0x4c>
 80020f6:	6821      	ldr	r1, [r4, #0]
 80020f8:	1862      	adds	r2, r4, r1
 80020fa:	4293      	cmp	r3, r2
 80020fc:	bf04      	itt	eq
 80020fe:	681a      	ldreq	r2, [r3, #0]
 8002100:	685b      	ldreq	r3, [r3, #4]
 8002102:	6063      	str	r3, [r4, #4]
 8002104:	bf04      	itt	eq
 8002106:	1852      	addeq	r2, r2, r1
 8002108:	6022      	streq	r2, [r4, #0]
 800210a:	6004      	str	r4, [r0, #0]
 800210c:	e7ec      	b.n	80020e8 <_free_r+0x24>
 800210e:	4613      	mov	r3, r2
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	b10a      	cbz	r2, 8002118 <_free_r+0x54>
 8002114:	42a2      	cmp	r2, r4
 8002116:	d9fa      	bls.n	800210e <_free_r+0x4a>
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	1858      	adds	r0, r3, r1
 800211c:	42a0      	cmp	r0, r4
 800211e:	d10b      	bne.n	8002138 <_free_r+0x74>
 8002120:	6820      	ldr	r0, [r4, #0]
 8002122:	4401      	add	r1, r0
 8002124:	1858      	adds	r0, r3, r1
 8002126:	4282      	cmp	r2, r0
 8002128:	6019      	str	r1, [r3, #0]
 800212a:	d1dd      	bne.n	80020e8 <_free_r+0x24>
 800212c:	6810      	ldr	r0, [r2, #0]
 800212e:	6852      	ldr	r2, [r2, #4]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	4401      	add	r1, r0
 8002134:	6019      	str	r1, [r3, #0]
 8002136:	e7d7      	b.n	80020e8 <_free_r+0x24>
 8002138:	d902      	bls.n	8002140 <_free_r+0x7c>
 800213a:	230c      	movs	r3, #12
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	e7d3      	b.n	80020e8 <_free_r+0x24>
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	1821      	adds	r1, r4, r0
 8002144:	428a      	cmp	r2, r1
 8002146:	bf04      	itt	eq
 8002148:	6811      	ldreq	r1, [r2, #0]
 800214a:	6852      	ldreq	r2, [r2, #4]
 800214c:	6062      	str	r2, [r4, #4]
 800214e:	bf04      	itt	eq
 8002150:	1809      	addeq	r1, r1, r0
 8002152:	6021      	streq	r1, [r4, #0]
 8002154:	605c      	str	r4, [r3, #4]
 8002156:	e7c7      	b.n	80020e8 <_free_r+0x24>
 8002158:	bd38      	pop	{r3, r4, r5, pc}
 800215a:	bf00      	nop
 800215c:	2000008c 	.word	0x2000008c

08002160 <_read_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4c07      	ldr	r4, [pc, #28]	; (8002180 <_read_r+0x20>)
 8002164:	4605      	mov	r5, r0
 8002166:	4608      	mov	r0, r1
 8002168:	4611      	mov	r1, r2
 800216a:	2200      	movs	r2, #0
 800216c:	6022      	str	r2, [r4, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	f7ff f84c 	bl	800120c <_read>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_read_r+0x1e>
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	b103      	cbz	r3, 800217e <_read_r+0x1e>
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	200002ac 	.word	0x200002ac

08002184 <_fstat_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4c07      	ldr	r4, [pc, #28]	; (80021a4 <_fstat_r+0x20>)
 8002188:	2300      	movs	r3, #0
 800218a:	4605      	mov	r5, r0
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	f7ff f87f 	bl	8001294 <_fstat>
 8002196:	1c43      	adds	r3, r0, #1
 8002198:	d102      	bne.n	80021a0 <_fstat_r+0x1c>
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	b103      	cbz	r3, 80021a0 <_fstat_r+0x1c>
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	bd38      	pop	{r3, r4, r5, pc}
 80021a2:	bf00      	nop
 80021a4:	200002ac 	.word	0x200002ac

080021a8 <_isatty_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4c06      	ldr	r4, [pc, #24]	; (80021c4 <_isatty_r+0x1c>)
 80021ac:	2300      	movs	r3, #0
 80021ae:	4605      	mov	r5, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	6023      	str	r3, [r4, #0]
 80021b4:	f7ff f87d 	bl	80012b2 <_isatty>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d102      	bne.n	80021c2 <_isatty_r+0x1a>
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	b103      	cbz	r3, 80021c2 <_isatty_r+0x1a>
 80021c0:	602b      	str	r3, [r5, #0]
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	200002ac 	.word	0x200002ac

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
